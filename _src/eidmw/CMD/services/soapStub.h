/* soapStub.h
   Generated by gSOAP 2.8.30 for CCMovelSignature.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"http://Ama.Authentication.Service/Imports"
#define SOAP_NAMESPACE_OF_ns2	"http://Ama.Authentication.Service/"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"
#define SOAP_WSA_200408
#define SOAP_NAMESPACE_OF_wsc	"http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20830
# error "GSOAP VERSION 20830 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif

#ifndef WIN32
#pragma GCC visibility push(hidden)
#endif

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* wsa.h:119 */
#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (49)
/* wsa:RelationshipTypeValues */
enum wsa__RelationshipTypeValues {
	wsa__Reply = 0
};
#endif

/* wsa.h:127 */
#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (50)
/* wsa:FaultSubcodeValues */
enum wsa__FaultSubcodeValues {
	wsa__InvalidMessageInformationHeader = 0,
	wsa__MessageInformationHeaderRequired = 1,
	wsa__DestinationUnreachable = 2,
	wsa__ActionNotSupported = 3,
	wsa__EndpointUnavailable = 4
};
#endif

/* wsu.h:66 */
#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (95)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault {
	wsu__MessageExpired = 0
};
#endif

/* wsse.h:98 */
#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (97)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum {
	wsse__UnsupportedSecurityToken = 0,
	wsse__UnsupportedAlgorithm = 1,
	wsse__InvalidSecurity = 2,
	wsse__InvalidSecurityToken = 3,
	wsse__FailedAuthentication = 4,
	wsse__FailedCheck = 5,
	wsse__SecurityTokenUnavailable = 6
};
#endif

/* wsc.h:62 */
#ifndef SOAP_TYPE_wsc__FaultCodeType
#define SOAP_TYPE_wsc__FaultCodeType (170)
/* wsc:FaultCodeType */
enum wsc__FaultCodeType {
	wsc__BadContextToken = 0,
	wsc__UnsupportedContextToken = 1,
	wsc__UnknownDerivationSource = 2,
	wsc__RenewNeeded = 3,
	wsc__UnableToRenew = 4
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* CCMovelSignature.h:153 */
class _ns2__CCMovelSign;	/* CCMovelSignature.h:169 */
class _ns2__CCMovelSignResponse;	/* CCMovelSignature.h:172 */
class _ns2__CCMovelValidateSignature;	/* CCMovelSignature.h:175 */
class _ns2__CCMovelValidateSignatureResponse;	/* CCMovelSignature.h:178 */
class _ns2__GetCertificate;	/* CCMovelSignature.h:181 */
class _ns2__GetCertificateResponse;	/* CCMovelSignature.h:184 */
class _ns2__ValidateOtp;	/* CCMovelSignature.h:187 */
class _ns2__ValidateOtpResponse;	/* CCMovelSignature.h:190 */
class ns3__SignRequest;	/* CCMovelSignature.h:193 */
class ns3__SignStatus;	/* CCMovelSignature.h:196 */
class ns3__ValidationRequest;	/* CCMovelSignature.h:199 */
class ns3__ValidationResponse;	/* CCMovelSignature.h:202 */
class ns3__SignResponse;	/* CCMovelSignature.h:205 */
struct wsa__EndpointReferenceType;	/* wsa.h:94 */
struct wsa__ReferencePropertiesType;	/* wsa.h:97 */
struct wsa__ReferenceParametersType;	/* wsa.h:100 */
struct wsa__ServiceNameType;	/* wsa.h:103 */
struct wsa__Relationship;	/* wsa.h:106 */
struct __tempuri__CCMovelSign;	/* CCMovelSignature.h:778 */
struct __tempuri__CCMovelValidateSignature;	/* CCMovelSignature.h:844 */
struct __tempuri__GetCertificate;	/* CCMovelSignature.h:910 */
struct __tempuri__ValidateOtp;	/* CCMovelSignature.h:976 */
struct _wsu__Timestamp;	/* wsu.h:76 */
struct _wsse__UsernameToken;	/* wsse.h:114 */
struct _wsse__BinarySecurityToken;	/* wsse.h:125 */
struct _wsse__Reference;	/* wsse.h:135 */
struct _wsse__Embedded;	/* wsse.h:143 */
struct _wsse__KeyIdentifier;	/* wsse.h:152 */
struct _wsse__SecurityTokenReference;	/* wsse.h:162 */
struct ds__SignatureType;	/* ds.h:47 */
struct _c14n__InclusiveNamespaces;	/* c14n.h:24 */
struct ds__TransformType;	/* ds.h:74 */
struct ds__KeyInfoType;	/* ds.h:49 */
struct ds__SignedInfoType;	/* ds.h:47 */
struct ds__CanonicalizationMethodType;	/* ds.h:60 */
struct ds__SignatureMethodType;	/* ds.h:63 */
struct ds__ReferenceType;	/* ds.h:66 */
struct ds__TransformsType;	/* ds.h:69 */
struct ds__DigestMethodType;	/* ds.h:80 */
struct ds__KeyValueType;	/* ds.h:86 */
struct ds__RetrievalMethodType;	/* ds.h:87 */
struct ds__X509DataType;	/* wsse.h:165 */
struct ds__X509IssuerSerialType;	/* ds.h:103 */
struct ds__DSAKeyValueType;	/* ds.h:124 */
struct ds__RSAKeyValueType;	/* ds.h:127 */
struct xenc__EncryptionPropertyType;	/* xenc.h:84 */
struct xenc__EncryptedType;	/* xenc.h:53 */
struct xenc__EncryptionMethodType;	/* xenc.h:56 */
struct xenc__CipherDataType;	/* xenc.h:59 */
struct xenc__CipherReferenceType;	/* xenc.h:62 */
struct xenc__TransformsType;	/* xenc.h:65 */
struct xenc__AgreementMethodType;	/* xenc.h:74 */
struct xenc__ReferenceType;	/* xenc.h:77 */
struct xenc__EncryptionPropertiesType;	/* xenc.h:80 */
struct __xenc__union_ReferenceList;	/* xenc.h:238 */
struct _xenc__ReferenceList;	/* xenc.h:89 */
struct xenc__EncryptedDataType;	/* xenc.h:68 */
struct xenc__EncryptedKeyType;	/* xenc.h:71 */
struct wsc__SecurityContextTokenType;	/* wsc.h:87 */
union _wsc__union_DerivedKeyTokenType;	/* wsc.h:125 */
struct __wsc__DerivedKeyTokenType_sequence;	/* wsc.h:116 */
struct wsc__DerivedKeyTokenType;	/* wsc.h:109 */
struct wsc__PropertiesType;	/* wsc.h:113 */
struct _wsse__Security;	/* wsse.h:177 */
struct _wsse__Password;	/* wsse.h:115 */

/* CCMovelSignature.h:153 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (11)
/* binary data attached as MTOM/MIME/DIME attachment or included as xsd:base64Binary base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XSD type 'xsd:string'
        char *id;
        /// Optional element 'type' of XSD type 'xsd:string'
        char *type;
        /// Optional element 'options' of XSD type 'xsd:string'
        char *options;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual int soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW(xsd__base64Binary); }
      public:
        /// Constructor with initializations
        xsd__base64Binary()
        {
          __ptr = (unsigned char *)0;
          __size = 0;
          id = NULL;
          type = (char *)0;
          options = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:169 */
#ifndef SOAP_TYPE__ns2__CCMovelSign
#define SOAP_TYPE__ns2__CCMovelSign (16)
/* complex XSD type 'ns2:CCMovelSign': */
class SOAP_CMAC _ns2__CCMovelSign {
      public:
        /// Optional element 'ns2:request' of XSD type 'ns3:SignRequest'
        ns3__SignRequest *request;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__CCMovelSign
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__CCMovelSign; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__CCMovelSign, default initialized and not managed by a soap context
        virtual _ns2__CCMovelSign *soap_alloc(void) const { return SOAP_NEW(_ns2__CCMovelSign); }
      public:
        /// Constructor with initializations
        _ns2__CCMovelSign()
        {
          request = (ns3__SignRequest *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__CCMovelSign() { }
        /// Friend allocator used by soap_new__ns2__CCMovelSign(struct soap*, int)
        friend SOAP_FMAC1 _ns2__CCMovelSign * SOAP_FMAC2 soap_instantiate__ns2__CCMovelSign(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:172 */
#ifndef SOAP_TYPE__ns2__CCMovelSignResponse
#define SOAP_TYPE__ns2__CCMovelSignResponse (17)
/* complex XSD type 'ns2:CCMovelSignResponse': */
class SOAP_CMAC _ns2__CCMovelSignResponse {
      public:
        /// Optional element 'ns2:CCMovelSignResult' of XSD type 'ns3:SignStatus'
        ns3__SignStatus *CCMovelSignResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__CCMovelSignResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__CCMovelSignResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__CCMovelSignResponse, default initialized and not managed by a soap context
        virtual _ns2__CCMovelSignResponse *soap_alloc(void) const { return SOAP_NEW(_ns2__CCMovelSignResponse); }
      public:
        /// Constructor with initializations
        _ns2__CCMovelSignResponse()
        {
          CCMovelSignResult = (ns3__SignStatus *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__CCMovelSignResponse() { }
        /// Friend allocator used by soap_new__ns2__CCMovelSignResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns2__CCMovelSignResponse * SOAP_FMAC2 soap_instantiate__ns2__CCMovelSignResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:175 */
#ifndef SOAP_TYPE__ns2__CCMovelValidateSignature
#define SOAP_TYPE__ns2__CCMovelValidateSignature (18)
/* complex XSD type 'ns2:CCMovelValidateSignature': */
class SOAP_CMAC _ns2__CCMovelValidateSignature {
      public:
        /// Optional element 'ns2:request' of XSD type 'ns3:ValidationRequest'
        ns3__ValidationRequest *request;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__CCMovelValidateSignature
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__CCMovelValidateSignature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__CCMovelValidateSignature, default initialized and not managed by a soap context
        virtual _ns2__CCMovelValidateSignature *soap_alloc(void) const { return SOAP_NEW(_ns2__CCMovelValidateSignature); }
      public:
        /// Constructor with initializations
        _ns2__CCMovelValidateSignature()
        {
          request = (ns3__ValidationRequest *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__CCMovelValidateSignature() { }
        /// Friend allocator used by soap_new__ns2__CCMovelValidateSignature(struct soap*, int)
        friend SOAP_FMAC1 _ns2__CCMovelValidateSignature * SOAP_FMAC2 soap_instantiate__ns2__CCMovelValidateSignature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:178 */
#ifndef SOAP_TYPE__ns2__CCMovelValidateSignatureResponse
#define SOAP_TYPE__ns2__CCMovelValidateSignatureResponse (19)
/* complex XSD type 'ns2:CCMovelValidateSignatureResponse': */
class SOAP_CMAC _ns2__CCMovelValidateSignatureResponse {
      public:
        /// Optional element 'ns2:CCMovelValidateSignatureResult' of XSD type 'ns3:ValidationResponse'
        ns3__ValidationResponse *CCMovelValidateSignatureResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__CCMovelValidateSignatureResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__CCMovelValidateSignatureResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__CCMovelValidateSignatureResponse, default initialized and not managed by a soap context
        virtual _ns2__CCMovelValidateSignatureResponse *soap_alloc(void) const { return SOAP_NEW(_ns2__CCMovelValidateSignatureResponse); }
      public:
        /// Constructor with initializations
        _ns2__CCMovelValidateSignatureResponse()
        {
          CCMovelValidateSignatureResult = (ns3__ValidationResponse *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__CCMovelValidateSignatureResponse() { }
        /// Friend allocator used by soap_new__ns2__CCMovelValidateSignatureResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns2__CCMovelValidateSignatureResponse * SOAP_FMAC2 soap_instantiate__ns2__CCMovelValidateSignatureResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:181 */
#ifndef SOAP_TYPE__ns2__GetCertificate
#define SOAP_TYPE__ns2__GetCertificate (20)
/* complex XSD type 'ns2:GetCertificate': */
class SOAP_CMAC _ns2__GetCertificate {
      public:
        /// Optional element 'ns2:applicationId' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *applicationId;
        /// Optional element 'ns2:userId' of XSD type 'xsd:string'
        std::string *userId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__GetCertificate
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__GetCertificate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__GetCertificate, default initialized and not managed by a soap context
        virtual _ns2__GetCertificate *soap_alloc(void) const { return SOAP_NEW(_ns2__GetCertificate); }
      public:
        /// Constructor with initializations
        _ns2__GetCertificate()
        {
          applicationId = (xsd__base64Binary *)0;
          userId = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__GetCertificate() { }
        /// Friend allocator used by soap_new__ns2__GetCertificate(struct soap*, int)
        friend SOAP_FMAC1 _ns2__GetCertificate * SOAP_FMAC2 soap_instantiate__ns2__GetCertificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:184 */
#ifndef SOAP_TYPE__ns2__GetCertificateResponse
#define SOAP_TYPE__ns2__GetCertificateResponse (21)
/* complex XSD type 'ns2:GetCertificateResponse': */
class SOAP_CMAC _ns2__GetCertificateResponse {
      public:
        /// Optional element 'ns2:GetCertificateResult' of XSD type 'xsd:string'
        std::string *GetCertificateResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__GetCertificateResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__GetCertificateResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__GetCertificateResponse, default initialized and not managed by a soap context
        virtual _ns2__GetCertificateResponse *soap_alloc(void) const { return SOAP_NEW(_ns2__GetCertificateResponse); }
      public:
        /// Constructor with initializations
        _ns2__GetCertificateResponse()
        {
          GetCertificateResult = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__GetCertificateResponse() { }
        /// Friend allocator used by soap_new__ns2__GetCertificateResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns2__GetCertificateResponse * SOAP_FMAC2 soap_instantiate__ns2__GetCertificateResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:187 */
#ifndef SOAP_TYPE__ns2__ValidateOtp
#define SOAP_TYPE__ns2__ValidateOtp (22)
/* complex XSD type 'ns2:ValidateOtp': */
class SOAP_CMAC _ns2__ValidateOtp {
      public:
        /// Optional element 'ns2:code' of XSD type 'xsd:string'
        std::string *code;
        /// Optional element 'ns2:processId' of XSD type 'xsd:string'
        std::string *processId;
        /// Optional element 'ns2:applicationId' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *applicationId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__ValidateOtp
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__ValidateOtp; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__ValidateOtp, default initialized and not managed by a soap context
        virtual _ns2__ValidateOtp *soap_alloc(void) const { return SOAP_NEW(_ns2__ValidateOtp); }
      public:
        /// Constructor with initializations
        _ns2__ValidateOtp()
        {
          code = (std::string *)0;
          processId = (std::string *)0;
          applicationId = (xsd__base64Binary *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__ValidateOtp() { }
        /// Friend allocator used by soap_new__ns2__ValidateOtp(struct soap*, int)
        friend SOAP_FMAC1 _ns2__ValidateOtp * SOAP_FMAC2 soap_instantiate__ns2__ValidateOtp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:190 */
#ifndef SOAP_TYPE__ns2__ValidateOtpResponse
#define SOAP_TYPE__ns2__ValidateOtpResponse (23)
/* complex XSD type 'ns2:ValidateOtpResponse': */
class SOAP_CMAC _ns2__ValidateOtpResponse {
      public:
        /// Optional element 'ns2:ValidateOtpResult' of XSD type 'ns3:SignResponse'
        ns3__SignResponse *ValidateOtpResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns2__ValidateOtpResponse
        virtual int soap_type(void) const { return SOAP_TYPE__ns2__ValidateOtpResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns2__ValidateOtpResponse, default initialized and not managed by a soap context
        virtual _ns2__ValidateOtpResponse *soap_alloc(void) const { return SOAP_NEW(_ns2__ValidateOtpResponse); }
      public:
        /// Constructor with initializations
        _ns2__ValidateOtpResponse()
        {
          ValidateOtpResult = (ns3__SignResponse *)0;
          soap = (struct soap *)0;
        }
        virtual ~_ns2__ValidateOtpResponse() { }
        /// Friend allocator used by soap_new__ns2__ValidateOtpResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns2__ValidateOtpResponse * SOAP_FMAC2 soap_instantiate__ns2__ValidateOtpResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:193 */
#ifndef SOAP_TYPE_ns3__SignRequest
#define SOAP_TYPE_ns3__SignRequest (24)
/* complex XSD type 'ns3:SignRequest': */
class SOAP_CMAC ns3__SignRequest {
      public:
        /// Required element 'ns3:ApplicationId' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *ApplicationId;
        /// Required element 'ns3:Hash' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *Hash;
        /// Required element 'ns3:Pin' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *Pin;
        /// Required element 'ns3:UserId' of XSD type 'xsd:string'
        std::string *UserId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__SignRequest
        virtual int soap_type(void) const { return SOAP_TYPE_ns3__SignRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__SignRequest, default initialized and not managed by a soap context
        virtual ns3__SignRequest *soap_alloc(void) const { return SOAP_NEW(ns3__SignRequest); }
      public:
        /// Constructor with initializations
        ns3__SignRequest()
        {
          ApplicationId = (xsd__base64Binary *)0;
          Hash = (xsd__base64Binary *)0;
          Pin = (xsd__base64Binary *)0;
          UserId = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns3__SignRequest() { }
        /// Friend allocator used by soap_new_ns3__SignRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__SignRequest * SOAP_FMAC2 soap_instantiate_ns3__SignRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:196 */
#ifndef SOAP_TYPE_ns3__SignStatus
#define SOAP_TYPE_ns3__SignStatus (25)
/* complex XSD type 'ns3:SignStatus': */
class SOAP_CMAC ns3__SignStatus {
      public:
        /// Required element 'ns3:Code' of XSD type 'xsd:string'
        std::string *Code;
        /// Required element 'ns3:Field' of XSD type 'xsd:string'
        std::string *Field;
        /// Required element 'ns3:FieldValue' of XSD type 'xsd:string'
        std::string *FieldValue;
        /// Required element 'ns3:Message' of XSD type 'xsd:string'
        std::string *Message;
        /// Required element 'ns3:ProcessId' of XSD type 'xsd:string'
        std::string *ProcessId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__SignStatus
        virtual int soap_type(void) const { return SOAP_TYPE_ns3__SignStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__SignStatus, default initialized and not managed by a soap context
        virtual ns3__SignStatus *soap_alloc(void) const { return SOAP_NEW(ns3__SignStatus); }
      public:
        /// Constructor with initializations
        ns3__SignStatus()
        {
          Code = (std::string *)0;
          Field = (std::string *)0;
          FieldValue = (std::string *)0;
          Message = (std::string *)0;
          ProcessId = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns3__SignStatus() { }
        /// Friend allocator used by soap_new_ns3__SignStatus(struct soap*, int)
        friend SOAP_FMAC1 ns3__SignStatus * SOAP_FMAC2 soap_instantiate_ns3__SignStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:199 */
#ifndef SOAP_TYPE_ns3__ValidationRequest
#define SOAP_TYPE_ns3__ValidationRequest (26)
/* complex XSD type 'ns3:ValidationRequest': */
class SOAP_CMAC ns3__ValidationRequest {
      public:
        /// Required element 'ns3:Hash' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *Hash;
        /// Required element 'ns3:Signature' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *Signature;
        /// Required element 'ns3:X509Certificate' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *X509Certificate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__ValidationRequest
        virtual int soap_type(void) const { return SOAP_TYPE_ns3__ValidationRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ValidationRequest, default initialized and not managed by a soap context
        virtual ns3__ValidationRequest *soap_alloc(void) const { return SOAP_NEW(ns3__ValidationRequest); }
      public:
        /// Constructor with initializations
        ns3__ValidationRequest()
        {
          Hash = (xsd__base64Binary *)0;
          Signature = (xsd__base64Binary *)0;
          X509Certificate = (xsd__base64Binary *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns3__ValidationRequest() { }
        /// Friend allocator used by soap_new_ns3__ValidationRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__ValidationRequest * SOAP_FMAC2 soap_instantiate_ns3__ValidationRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:202 */
#ifndef SOAP_TYPE_ns3__ValidationResponse
#define SOAP_TYPE_ns3__ValidationResponse (27)
/* complex XSD type 'ns3:ValidationResponse': */
class SOAP_CMAC ns3__ValidationResponse {
      public:
        /// Required element 'ns3:Status' of XSD type 'ns3:SignStatus'
        ns3__SignStatus *Status;
        /// Required element 'ns3:ValidationResult' of XSD type 'xsd:boolean'
        bool *ValidationResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__ValidationResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns3__ValidationResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ValidationResponse, default initialized and not managed by a soap context
        virtual ns3__ValidationResponse *soap_alloc(void) const { return SOAP_NEW(ns3__ValidationResponse); }
      public:
        /// Constructor with initializations
        ns3__ValidationResponse()
        {
          Status = (ns3__SignStatus *)0;
          ValidationResult = (bool *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns3__ValidationResponse() { }
        /// Friend allocator used by soap_new_ns3__ValidationResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__ValidationResponse * SOAP_FMAC2 soap_instantiate_ns3__ValidationResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:205 */
#ifndef SOAP_TYPE_ns3__SignResponse
#define SOAP_TYPE_ns3__SignResponse (28)
/* complex XSD type 'ns3:SignResponse': */
class SOAP_CMAC ns3__SignResponse {
      public:
        /// Required element 'ns3:Signature' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *Signature;
        /// Required element 'ns3:Status' of XSD type 'ns3:SignStatus'
        ns3__SignStatus *Status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns3__SignResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns3__SignResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__SignResponse, default initialized and not managed by a soap context
        virtual ns3__SignResponse *soap_alloc(void) const { return SOAP_NEW(ns3__SignResponse); }
      public:
        /// Constructor with initializations
        ns3__SignResponse()
        {
          Signature = (xsd__base64Binary *)0;
          Status = (ns3__SignStatus *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns3__SignResponse() { }
        /// Friend allocator used by soap_new_ns3__SignResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__SignResponse * SOAP_FMAC2 soap_instantiate_ns3__SignResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:94 */
#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (44)
/* complex XSD type 'wsa:EndpointReferenceType': */
struct wsa__EndpointReferenceType {
      public:
        /** Required element 'wsa:Address' of XSD type 'xsd:string' */
        char *Address;
        /** Optional element 'wsa:ReferenceProperties' of XSD type 'wsa:ReferencePropertiesType' */
        struct wsa__ReferencePropertiesType *ReferenceProperties;
        /** Optional element 'wsa:ReferenceParameters' of XSD type 'wsa:ReferenceParametersType' */
        struct wsa__ReferenceParametersType *ReferenceParameters;
        /** Optional element 'wsa:PortType' of XSD type 'xsd:QName' */
        char **PortType;
        /** Optional element 'wsa:ServiceName' of XSD type 'wsa:ServiceNameType' */
        struct wsa__ServiceNameType *ServiceName;
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa__EndpointReferenceType */
        int soap_type() const { return SOAP_TYPE_wsa__EndpointReferenceType; }
        /** Constructor with member initializations */
        wsa__EndpointReferenceType()
        {
          Address = (char *)0;
          ReferenceProperties = (struct wsa__ReferencePropertiesType *)0;
          ReferenceParameters = (struct wsa__ReferenceParametersType *)0;
          PortType = (char **)0;
          ServiceName = (struct wsa__ServiceNameType *)0;
          __size = 0;
          __any = NULL;
          __anyAttribute = (char *)0;
        }
        /** Friend allocator used by soap_new_wsa__EndpointReferenceType(struct soap*, int) */
        friend SOAP_FMAC1 wsa__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:97 */
#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (45)
/* complex XSD type 'wsa:ReferencePropertiesType': */
struct wsa__ReferencePropertiesType {
      public:
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
      public:
        /** Return unique type id SOAP_TYPE_wsa__ReferencePropertiesType */
        int soap_type() const { return SOAP_TYPE_wsa__ReferencePropertiesType; }
        /** Constructor with member initializations */
        wsa__ReferencePropertiesType()
        {
          __size = 0;
          __any = NULL;
        }
        /** Friend allocator used by soap_new_wsa__ReferencePropertiesType(struct soap*, int) */
        friend SOAP_FMAC1 wsa__ReferencePropertiesType * SOAP_FMAC2 soap_instantiate_wsa__ReferencePropertiesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:100 */
#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (46)
/* complex XSD type 'wsa:ReferenceParametersType': */
struct wsa__ReferenceParametersType {
      public:
        /** Sequence of elements '-any' of XSD type 'xsd:anyType' stored in dynamic array __any of length __size */
        int __size;
        char **__any;
      public:
        /** Return unique type id SOAP_TYPE_wsa__ReferenceParametersType */
        int soap_type() const { return SOAP_TYPE_wsa__ReferenceParametersType; }
        /** Constructor with member initializations */
        wsa__ReferenceParametersType()
        {
          __size = 0;
          __any = NULL;
        }
        /** Friend allocator used by soap_new_wsa__ReferenceParametersType(struct soap*, int) */
        friend SOAP_FMAC1 wsa__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:103 */
#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (47)
/* simple XSD type 'wsa:ServiceNameType': */
struct wsa__ServiceNameType {
      public:
        /** Simple content of XSD type 'xsd:QName' wrapped by this struct */
        char *__item;
        /** Optional attribute 'PortName' of XSD type 'xsd:string' */
        char *PortName;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa__ServiceNameType */
        int soap_type() const { return SOAP_TYPE_wsa__ServiceNameType; }
        /** Constructor with member initializations */
        wsa__ServiceNameType()
        {
          __item = (char *)0;
          PortName = (char *)0;
          __anyAttribute = (char *)0;
        }
        /** Friend allocator used by soap_new_wsa__ServiceNameType(struct soap*, int) */
        friend SOAP_FMAC1 wsa__ServiceNameType * SOAP_FMAC2 soap_instantiate_wsa__ServiceNameType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:106 */
#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (48)
/* simple XSD type 'wsa:Relationship': */
struct wsa__Relationship {
      public:
        /** Simple content of XSD type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'RelationshipType' of XSD type 'xsd:QName' */
        char *RelationshipType;
        /** Optional attribute '-anyAttribute' of XSD type 'xsd:anyType' */
        char *__anyAttribute;
      public:
        /** Return unique type id SOAP_TYPE_wsa__Relationship */
        int soap_type() const { return SOAP_TYPE_wsa__Relationship; }
        /** Constructor with member initializations */
        wsa__Relationship()
        {
          __item = (char *)0;
          RelationshipType = (char *)0;
          __anyAttribute = (char *)0;
        }
        /** Friend allocator used by soap_new_wsa__Relationship(struct soap*, int) */
        friend SOAP_FMAC1 wsa__Relationship * SOAP_FMAC2 soap_instantiate_wsa__Relationship(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsa.h:250 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (65)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
      public:
        /** Optional element 'wsa:MessageID' of XSD type 'wsa:MessageID' */
        char *wsa__MessageID;
        /** Optional element 'wsa:RelatesTo' of XSD type 'wsa:RelatesTo' */
        struct wsa__Relationship *wsa__RelatesTo;
        /** Optional element 'wsa:From' of XSD type 'wsa:From' */
        struct wsa__EndpointReferenceType *wsa__From;
        /** MustUnderstand */
        struct wsa__EndpointReferenceType *wsa__ReplyTo;
        /** MustUnderstand */
        struct wsa__EndpointReferenceType *wsa__FaultTo;
        /** MustUnderstand */
        char *wsa__To;
        /** MustUnderstand */
        char *wsa__Action;
        /** MustUnderstand */
        struct _wsse__Security *wsse__Security;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
          wsa__MessageID = (char *)0;
          wsa__RelatesTo = (struct wsa__Relationship *)0;
          wsa__From = (struct wsa__EndpointReferenceType *)0;
          wsa__ReplyTo = (struct wsa__EndpointReferenceType *)0;
          wsa__FaultTo = (struct wsa__EndpointReferenceType *)0;
          wsa__To = (char *)0;
          wsa__Action = (char *)0;
          wsse__Security = (struct _wsse__Security *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa.h:266 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (70)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa.h:267 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (72)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa.h:268 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (74)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* wsa.h:273 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (78)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* CCMovelSignature.h:778 */
#ifndef SOAP_TYPE___tempuri__CCMovelSign
#define SOAP_TYPE___tempuri__CCMovelSign (82)
/* Wrapper: */
struct __tempuri__CCMovelSign {
      public:
        /** Optional element 'ns2:CCMovelSign' of XSD type 'ns2:CCMovelSign' */
        _ns2__CCMovelSign *ns2__CCMovelSign;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__CCMovelSign */
        int soap_type() const { return SOAP_TYPE___tempuri__CCMovelSign; }
        /** Constructor with member initializations */
        __tempuri__CCMovelSign()
        {
          ns2__CCMovelSign = (_ns2__CCMovelSign *)0;
        }
        /** Friend allocator used by soap_new___tempuri__CCMovelSign(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__CCMovelSign * SOAP_FMAC2 soap_instantiate___tempuri__CCMovelSign(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:844 */
#ifndef SOAP_TYPE___tempuri__CCMovelValidateSignature
#define SOAP_TYPE___tempuri__CCMovelValidateSignature (86)
/* Wrapper: */
struct __tempuri__CCMovelValidateSignature {
      public:
        /** Optional element 'ns2:CCMovelValidateSignature' of XSD type 'ns2:CCMovelValidateSignature' */
        _ns2__CCMovelValidateSignature *ns2__CCMovelValidateSignature;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__CCMovelValidateSignature */
        int soap_type() const { return SOAP_TYPE___tempuri__CCMovelValidateSignature; }
        /** Constructor with member initializations */
        __tempuri__CCMovelValidateSignature()
        {
          ns2__CCMovelValidateSignature = (_ns2__CCMovelValidateSignature *)0;
        }
        /** Friend allocator used by soap_new___tempuri__CCMovelValidateSignature(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__CCMovelValidateSignature * SOAP_FMAC2 soap_instantiate___tempuri__CCMovelValidateSignature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:910 */
#ifndef SOAP_TYPE___tempuri__GetCertificate
#define SOAP_TYPE___tempuri__GetCertificate (90)
/* Wrapper: */
struct __tempuri__GetCertificate {
      public:
        /** Optional element 'ns2:GetCertificate' of XSD type 'ns2:GetCertificate' */
        _ns2__GetCertificate *ns2__GetCertificate;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__GetCertificate */
        int soap_type() const { return SOAP_TYPE___tempuri__GetCertificate; }
        /** Constructor with member initializations */
        __tempuri__GetCertificate()
        {
          ns2__GetCertificate = (_ns2__GetCertificate *)0;
        }
        /** Friend allocator used by soap_new___tempuri__GetCertificate(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__GetCertificate * SOAP_FMAC2 soap_instantiate___tempuri__GetCertificate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* CCMovelSignature.h:976 */
#ifndef SOAP_TYPE___tempuri__ValidateOtp
#define SOAP_TYPE___tempuri__ValidateOtp (94)
/* Wrapper: */
struct __tempuri__ValidateOtp {
      public:
        /** Optional element 'ns2:ValidateOtp' of XSD type 'ns2:ValidateOtp' */
        _ns2__ValidateOtp *ns2__ValidateOtp;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__ValidateOtp */
        int soap_type() const { return SOAP_TYPE___tempuri__ValidateOtp; }
        /** Constructor with member initializations */
        __tempuri__ValidateOtp()
        {
          ns2__ValidateOtp = (_ns2__ValidateOtp *)0;
        }
        /** Friend allocator used by soap_new___tempuri__ValidateOtp(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__ValidateOtp * SOAP_FMAC2 soap_instantiate___tempuri__ValidateOtp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsu.h:76 */
#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (96)
/* complex XSD type 'wsu:Timestamp': */
struct _wsu__Timestamp {
      public:
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional element 'wsu:Created' of XSD type 'xsd:string' */
        char *Created;
        /** Optional element 'wsu:Expires' of XSD type 'xsd:string' */
        char *Expires;
      public:
        /** Return unique type id SOAP_TYPE__wsu__Timestamp */
        int soap_type() const { return SOAP_TYPE__wsu__Timestamp; }
        /** Constructor with member initializations */
        _wsu__Timestamp()
        {
          wsu__Id = (char *)0;
          Created = (char *)0;
          Expires = (char *)0;
        }
        /** Friend allocator used by soap_new__wsu__Timestamp(struct soap*, int) */
        friend SOAP_FMAC1 _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:114 */
#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (98)
/* complex XSD type 'wsse:UsernameToken': */
struct _wsse__UsernameToken {
      public:
        /** Optional element 'wsse:Username' of XSD type 'xsd:string' */
        char *Username;
        /** Optional element 'wsse:Password' of XSD type 'wsse:Password' */
        struct _wsse__Password *Password;
        /** Optional element 'wsse:Nonce' of XSD type 'xsd:string' */
        char *Nonce;
        /** Optional element 'wsu:Created' of XSD type 'xsd:string' */
        char *wsu__Created;
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
      public:
        /** Return unique type id SOAP_TYPE__wsse__UsernameToken */
        int soap_type() const { return SOAP_TYPE__wsse__UsernameToken; }
        /** Constructor with member initializations */
        _wsse__UsernameToken()
        {
          Username = (char *)0;
          Password = (struct _wsse__Password *)0;
          Nonce = (char *)0;
          wsu__Created = (char *)0;
          wsu__Id = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__UsernameToken(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:125 */
#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (101)
/* simple XSD type 'wsse:BinarySecurityToken': */
struct _wsse__BinarySecurityToken {
      public:
        /** Simple content of XSD type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional attribute 'ValueType' of XSD type 'xsd:string' */
        char *ValueType;
        /** Optional attribute 'EncodingType' of XSD type 'xsd:string' */
        char *EncodingType;
      public:
        /** Return unique type id SOAP_TYPE__wsse__BinarySecurityToken */
        int soap_type() const { return SOAP_TYPE__wsse__BinarySecurityToken; }
        /** Constructor with member initializations */
        _wsse__BinarySecurityToken()
        {
          __item = (char *)0;
          wsu__Id = (char *)0;
          ValueType = (char *)0;
          EncodingType = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__BinarySecurityToken(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:135 */
#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (102)
/* complex XSD type 'wsse:Reference': */
struct _wsse__Reference {
      public:
        /** Optional attribute 'URI' of XSD type 'xsd:string' */
        char *URI;
        /** Optional attribute 'ValueType' of XSD type 'xsd:string' */
        char *ValueType;
      public:
        /** Return unique type id SOAP_TYPE__wsse__Reference */
        int soap_type() const { return SOAP_TYPE__wsse__Reference; }
        /** Constructor with member initializations */
        _wsse__Reference()
        {
          URI = (char *)0;
          ValueType = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__Reference(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:143 */
#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (103)
/* complex XSD type 'wsse:Embedded': */
struct _wsse__Embedded {
      public:
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional attribute 'ValueType' of XSD type 'xsd:string' */
        char *ValueType;
      public:
        /** Return unique type id SOAP_TYPE__wsse__Embedded */
        int soap_type() const { return SOAP_TYPE__wsse__Embedded; }
        /** Constructor with member initializations */
        _wsse__Embedded()
        {
          wsu__Id = (char *)0;
          ValueType = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__Embedded(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:152 */
#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (104)
/* simple XSD type 'wsse:KeyIdentifier': */
struct _wsse__KeyIdentifier {
      public:
        /** Simple content of XSD type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional attribute 'ValueType' of XSD type 'xsd:string' */
        char *ValueType;
        /** Optional attribute 'EncodingType' of XSD type 'xsd:string' */
        char *EncodingType;
      public:
        /** Return unique type id SOAP_TYPE__wsse__KeyIdentifier */
        int soap_type() const { return SOAP_TYPE__wsse__KeyIdentifier; }
        /** Constructor with member initializations */
        _wsse__KeyIdentifier()
        {
          __item = (char *)0;
          wsu__Id = (char *)0;
          ValueType = (char *)0;
          EncodingType = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__KeyIdentifier(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:162 */
#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (105)
/* complex XSD type 'wsse:SecurityTokenReference': */
struct _wsse__SecurityTokenReference {
      public:
        /** Optional element 'wsse:Reference' of XSD type 'wsse:Reference' */
        struct _wsse__Reference *Reference;
        /** Optional element 'wsse:KeyIdentifier' of XSD type 'wsse:KeyIdentifier' */
        struct _wsse__KeyIdentifier *KeyIdentifier;
        /** Optional element 'wsse:Embedded' of XSD type 'wsse:Embedded' */
        struct _wsse__Embedded *Embedded;
        /** Optional element 'ds:X509Data' of XSD type 'ds:X509DataType' */
        struct ds__X509DataType *ds__X509Data;
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional attribute 'wsc:Instance' of XSD type 'xsd:string' */
        char *wsc__Instance;
        /** Optional attribute 'Usage' of XSD type 'xsd:string' */
        char *Usage;
      public:
        /** Return unique type id SOAP_TYPE__wsse__SecurityTokenReference */
        int soap_type() const { return SOAP_TYPE__wsse__SecurityTokenReference; }
        /** Constructor with member initializations */
        _wsse__SecurityTokenReference()
        {
          Reference = (struct _wsse__Reference *)0;
          KeyIdentifier = (struct _wsse__KeyIdentifier *)0;
          Embedded = (struct _wsse__Embedded *)0;
          ds__X509Data = (struct ds__X509DataType *)0;
          wsu__Id = (char *)0;
          wsc__Instance = (char *)0;
          Usage = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__SecurityTokenReference(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:47 */
#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (111)
/* complex XSD type 'ds:SignatureType': */
struct ds__SignatureType {
      public:
        /** Optional element 'ds:SignedInfo' of XSD type 'ds:SignedInfoType' */
        struct ds__SignedInfoType *SignedInfo;
        /** Optional element 'ds:SignatureValue' of XSD type 'xsd:string' */
        char *SignatureValue;
        /** Optional element 'ds:KeyInfo' of XSD type 'ds:KeyInfoType' */
        struct ds__KeyInfoType *KeyInfo;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
      public:
        /** Return unique type id SOAP_TYPE_ds__SignatureType */
        int soap_type() const { return SOAP_TYPE_ds__SignatureType; }
        /** Constructor with member initializations */
        ds__SignatureType()
        {
          SignedInfo = (struct ds__SignedInfoType *)0;
          SignatureValue = (char *)0;
          KeyInfo = (struct ds__KeyInfoType *)0;
          Id = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__SignatureType(struct soap*, int) */
        friend SOAP_FMAC1 ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* c14n.h:24 */
#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (121)
/* complex XSD type 'c14n:InclusiveNamespaces': */
struct _c14n__InclusiveNamespaces {
      public:
        /** Optional attribute 'PrefixList' of XSD type 'xsd:string' */
        char *PrefixList;
      public:
        /** Return unique type id SOAP_TYPE__c14n__InclusiveNamespaces */
        int soap_type() const { return SOAP_TYPE__c14n__InclusiveNamespaces; }
        /** Constructor with member initializations */
        _c14n__InclusiveNamespaces()
        {
          PrefixList = (char *)0;
        }
        /** Friend allocator used by soap_new__c14n__InclusiveNamespaces(struct soap*, int) */
        friend SOAP_FMAC1 _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:74 */
#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (122)
/* complex XSD type 'ds:TransformType': */
struct ds__TransformType {
      public:
        /** Optional element 'c14n:InclusiveNamespaces' of XSD type 'c14n:InclusiveNamespaces' */
        struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;
        char *__any;
        /** Optional attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
      public:
        /** Return unique type id SOAP_TYPE_ds__TransformType */
        int soap_type() const { return SOAP_TYPE_ds__TransformType; }
        /** Constructor with member initializations */
        ds__TransformType()
        {
          c14n__InclusiveNamespaces = (struct _c14n__InclusiveNamespaces *)0;
          __any = (char *)0;
          Algorithm = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__TransformType(struct soap*, int) */
        friend SOAP_FMAC1 ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:49 */
#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (114)
/* complex XSD type 'ds:KeyInfoType': */
struct ds__KeyInfoType {
      public:
        /** Optional element 'ds:KeyName' of XSD type 'xsd:string' */
        char *KeyName;
        /** Optional element 'ds:KeyValue' of XSD type 'ds:KeyValueType' */
        struct ds__KeyValueType *KeyValue;
        /** Optional element 'ds:RetrievalMethod' of XSD type 'ds:RetrievalMethodType' */
        struct ds__RetrievalMethodType *RetrievalMethod;
        /** Optional element 'ds:X509Data' of XSD type 'ds:X509DataType' */
        struct ds__X509DataType *X509Data;
        /** Optional element 'wsse:SecurityTokenReference' of XSD type 'wsse:SecurityTokenReference' */
        struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
      public:
        /** Return unique type id SOAP_TYPE_ds__KeyInfoType */
        int soap_type() const { return SOAP_TYPE_ds__KeyInfoType; }
        /** Constructor with member initializations */
        ds__KeyInfoType()
        {
          KeyName = (char *)0;
          KeyValue = (struct ds__KeyValueType *)0;
          RetrievalMethod = (struct ds__RetrievalMethodType *)0;
          X509Data = (struct ds__X509DataType *)0;
          wsse__SecurityTokenReference = (struct _wsse__SecurityTokenReference *)0;
          Id = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__KeyInfoType(struct soap*, int) */
        friend SOAP_FMAC1 ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:47 */
#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (112)
/* complex XSD type 'ds:SignedInfoType': */
struct ds__SignedInfoType {
      public:
        /** Required element 'ds:CanonicalizationMethod' of XSD type 'ds:CanonicalizationMethodType' */
        struct ds__CanonicalizationMethodType *CanonicalizationMethod;
        /** Required element 'ds:SignatureMethod' of XSD type 'ds:SignatureMethodType' */
        struct ds__SignatureMethodType *SignatureMethod;
        /** Sequence of elements 'ds:Reference' of XSD type 'ds:ReferenceType' stored in dynamic array Reference of length __sizeReference */
        int __sizeReference;
        struct ds__ReferenceType **Reference;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
      public:
        /** Return unique type id SOAP_TYPE_ds__SignedInfoType */
        int soap_type() const { return SOAP_TYPE_ds__SignedInfoType; }
        /** Constructor with member initializations */
        ds__SignedInfoType()
        {
          CanonicalizationMethod = (struct ds__CanonicalizationMethodType *)0;
          SignatureMethod = (struct ds__SignatureMethodType *)0;
          __sizeReference = 0;
          Reference = NULL;
          Id = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__SignedInfoType(struct soap*, int) */
        friend SOAP_FMAC1 ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:60 */
#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (117)
/* complex XSD type 'ds:CanonicalizationMethodType': */
struct ds__CanonicalizationMethodType {
      public:
        /** Required attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
        /** Optional element 'c14n:InclusiveNamespaces' of XSD type 'c14n:InclusiveNamespaces' */
        struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;
      public:
        /** Return unique type id SOAP_TYPE_ds__CanonicalizationMethodType */
        int soap_type() const { return SOAP_TYPE_ds__CanonicalizationMethodType; }
        /** Constructor with member initializations */
        ds__CanonicalizationMethodType()
        {
          Algorithm = (char *)0;
          c14n__InclusiveNamespaces = (struct _c14n__InclusiveNamespaces *)0;
        }
        /** Friend allocator used by soap_new_ds__CanonicalizationMethodType(struct soap*, int) */
        friend SOAP_FMAC1 ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:63 */
#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (118)
/* complex XSD type 'ds:SignatureMethodType': */
struct ds__SignatureMethodType {
      public:
        /** Optional element 'ds:HMACOutputLength' of XSD type 'xsd:int' */
        int *HMACOutputLength;
        /** Required attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
      public:
        /** Return unique type id SOAP_TYPE_ds__SignatureMethodType */
        int soap_type() const { return SOAP_TYPE_ds__SignatureMethodType; }
        /** Constructor with member initializations */
        ds__SignatureMethodType()
        {
          HMACOutputLength = (int *)0;
          Algorithm = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__SignatureMethodType(struct soap*, int) */
        friend SOAP_FMAC1 ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:66 */
#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (119)
/* complex XSD type 'ds:ReferenceType': */
struct ds__ReferenceType {
      public:
        /** Optional element 'ds:Transforms' of XSD type 'ds:TransformsType' */
        struct ds__TransformsType *Transforms;
        /** Required element 'ds:DigestMethod' of XSD type 'ds:DigestMethodType' */
        struct ds__DigestMethodType *DigestMethod;
        /** Required element 'ds:DigestValue' of XSD type 'xsd:string' */
        char *DigestValue;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
        /** Optional attribute 'URI' of XSD type 'xsd:string' */
        char *URI;
        /** Optional attribute 'Type' of XSD type 'xsd:string' */
        char *Type;
      public:
        /** Return unique type id SOAP_TYPE_ds__ReferenceType */
        int soap_type() const { return SOAP_TYPE_ds__ReferenceType; }
        /** Constructor with member initializations */
        ds__ReferenceType()
        {
          Transforms = (struct ds__TransformsType *)0;
          DigestMethod = (struct ds__DigestMethodType *)0;
          DigestValue = (char *)0;
          Id = (char *)0;
          URI = (char *)0;
          Type = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__ReferenceType(struct soap*, int) */
        friend SOAP_FMAC1 ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:69 */
#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (120)
/* complex XSD type 'ds:TransformsType': */
struct ds__TransformsType {
      public:
        /** Sequence of elements 'ds:Transform' of XSD type 'ds:TransformType' stored in dynamic array Transform of length __sizeTransform */
        int __sizeTransform;
        struct ds__TransformType *Transform;
      public:
        /** Return unique type id SOAP_TYPE_ds__TransformsType */
        int soap_type() const { return SOAP_TYPE_ds__TransformsType; }
        /** Constructor with member initializations */
        ds__TransformsType()
        {
          __sizeTransform = 0;
          Transform = NULL;
        }
        /** Friend allocator used by soap_new_ds__TransformsType(struct soap*, int) */
        friend SOAP_FMAC1 ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:80 */
#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (125)
/* complex XSD type 'ds:DigestMethodType': */
struct ds__DigestMethodType {
      public:
        /** Required attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
      public:
        /** Return unique type id SOAP_TYPE_ds__DigestMethodType */
        int soap_type() const { return SOAP_TYPE_ds__DigestMethodType; }
        /** Constructor with member initializations */
        ds__DigestMethodType()
        {
          Algorithm = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__DigestMethodType(struct soap*, int) */
        friend SOAP_FMAC1 ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:86 */
#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (126)
/* complex XSD type 'ds:KeyValueType': */
struct ds__KeyValueType {
      public:
        /** Optional element 'ds:DSAKeyValue' of XSD type 'ds:DSAKeyValueType' */
        struct ds__DSAKeyValueType *DSAKeyValue;
        /** Optional element 'ds:RSAKeyValue' of XSD type 'ds:RSAKeyValueType' */
        struct ds__RSAKeyValueType *RSAKeyValue;
      public:
        /** Return unique type id SOAP_TYPE_ds__KeyValueType */
        int soap_type() const { return SOAP_TYPE_ds__KeyValueType; }
        /** Constructor with member initializations */
        ds__KeyValueType()
        {
          DSAKeyValue = (struct ds__DSAKeyValueType *)0;
          RSAKeyValue = (struct ds__RSAKeyValueType *)0;
        }
        /** Friend allocator used by soap_new_ds__KeyValueType(struct soap*, int) */
        friend SOAP_FMAC1 ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:87 */
#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (128)
/* complex XSD type 'ds:RetrievalMethodType': */
struct ds__RetrievalMethodType {
      public:
        /** Optional element 'ds:Transforms' of XSD type 'ds:TransformsType' */
        struct ds__TransformsType *Transforms;
        /** Optional attribute 'URI' of XSD type 'xsd:string' */
        char *URI;
        /** Optional attribute 'Type' of XSD type 'xsd:string' */
        char *Type;
      public:
        /** Return unique type id SOAP_TYPE_ds__RetrievalMethodType */
        int soap_type() const { return SOAP_TYPE_ds__RetrievalMethodType; }
        /** Constructor with member initializations */
        ds__RetrievalMethodType()
        {
          Transforms = (struct ds__TransformsType *)0;
          URI = (char *)0;
          Type = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__RetrievalMethodType(struct soap*, int) */
        friend SOAP_FMAC1 ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:165 */
#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (109)
/* complex XSD type 'ds:X509DataType': */
struct ds__X509DataType {
      public:
        /** Optional element 'ds:X509IssuerSerial' of XSD type 'ds:X509IssuerSerialType' */
        struct ds__X509IssuerSerialType *X509IssuerSerial;
        /** Optional element 'ds:X509SKI' of XSD type 'xsd:string' */
        char *X509SKI;
        /** Optional element 'ds:X509SubjectName' of XSD type 'xsd:string' */
        char *X509SubjectName;
        /** Optional element 'ds:X509Certificate' of XSD type 'xsd:string' */
        char *X509Certificate;
        /** Optional element 'ds:X509CRL' of XSD type 'xsd:string' */
        char *X509CRL;
      public:
        /** Return unique type id SOAP_TYPE_ds__X509DataType */
        int soap_type() const { return SOAP_TYPE_ds__X509DataType; }
        /** Constructor with member initializations */
        ds__X509DataType()
        {
          X509IssuerSerial = (struct ds__X509IssuerSerialType *)0;
          X509SKI = (char *)0;
          X509SubjectName = (char *)0;
          X509Certificate = (char *)0;
          X509CRL = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__X509DataType(struct soap*, int) */
        friend SOAP_FMAC1 ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:103 */
#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (132)
/* complex XSD type 'ds:X509IssuerSerialType': */
struct ds__X509IssuerSerialType {
      public:
        /** Required element 'ds:X509IssuerName' of XSD type 'xsd:string' */
        char *X509IssuerName;
        /** Required element 'ds:X509SerialNumber' of XSD type 'xsd:string' */
        char *X509SerialNumber;
      public:
        /** Return unique type id SOAP_TYPE_ds__X509IssuerSerialType */
        int soap_type() const { return SOAP_TYPE_ds__X509IssuerSerialType; }
        /** Constructor with member initializations */
        ds__X509IssuerSerialType()
        {
          X509IssuerName = (char *)0;
          X509SerialNumber = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__X509IssuerSerialType(struct soap*, int) */
        friend SOAP_FMAC1 ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:124 */
#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (133)
/* complex XSD type 'ds:DSAKeyValueType': */
struct ds__DSAKeyValueType {
      public:
        /** Optional element 'ds:G' of XSD type 'xsd:string' */
        char *G;
        /** Required element 'ds:Y' of XSD type 'xsd:string' */
        char *Y;
        /** Optional element 'ds:J' of XSD type 'xsd:string' */
        char *J;
        /** Required element 'ds:P' of XSD type 'xsd:string' */
        char *P;
        /** Required element 'ds:Q' of XSD type 'xsd:string' */
        char *Q;
        /** Required element 'ds:Seed' of XSD type 'xsd:string' */
        char *Seed;
        /** Required element 'ds:PgenCounter' of XSD type 'xsd:string' */
        char *PgenCounter;
      public:
        /** Return unique type id SOAP_TYPE_ds__DSAKeyValueType */
        int soap_type() const { return SOAP_TYPE_ds__DSAKeyValueType; }
        /** Constructor with member initializations */
        ds__DSAKeyValueType()
        {
          G = (char *)0;
          Y = (char *)0;
          J = (char *)0;
          P = (char *)0;
          Q = (char *)0;
          Seed = (char *)0;
          PgenCounter = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__DSAKeyValueType(struct soap*, int) */
        friend SOAP_FMAC1 ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ds.h:127 */
#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (134)
/* complex XSD type 'ds:RSAKeyValueType': */
struct ds__RSAKeyValueType {
      public:
        /** Required element 'ds:Modulus' of XSD type 'xsd:string' */
        char *Modulus;
        /** Required element 'ds:Exponent' of XSD type 'xsd:string' */
        char *Exponent;
      public:
        /** Return unique type id SOAP_TYPE_ds__RSAKeyValueType */
        int soap_type() const { return SOAP_TYPE_ds__RSAKeyValueType; }
        /** Constructor with member initializations */
        ds__RSAKeyValueType()
        {
          Modulus = (char *)0;
          Exponent = (char *)0;
        }
        /** Friend allocator used by soap_new_ds__RSAKeyValueType(struct soap*, int) */
        friend SOAP_FMAC1 ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:84 */
#ifndef SOAP_TYPE_xenc__EncryptionPropertyType
#define SOAP_TYPE_xenc__EncryptionPropertyType (156)
/* complex XSD type 'xenc:EncryptionPropertyType': */
struct xenc__EncryptionPropertyType {
      public:
        /** Optional attribute 'Target' of XSD type 'xsd:string' */
        char *Target;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
      public:
        /** Return unique type id SOAP_TYPE_xenc__EncryptionPropertyType */
        int soap_type() const { return SOAP_TYPE_xenc__EncryptionPropertyType; }
        /** Constructor with member initializations */
        xenc__EncryptionPropertyType()
        {
          Target = (char *)0;
          Id = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__EncryptionPropertyType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:53 */
#ifndef SOAP_TYPE_xenc__EncryptedType
#define SOAP_TYPE_xenc__EncryptedType (146)
/* complex XSD type 'xenc:EncryptedType': */
struct xenc__EncryptedType {
      public:
        /** Optional element 'xenc:EncryptionMethod' of XSD type 'xenc:EncryptionMethodType' */
        struct xenc__EncryptionMethodType *EncryptionMethod;
        /** Optional element 'ds:KeyInfo' of XSD type 'ds:KeyInfo' */
        struct ds__KeyInfoType *ds__KeyInfo;
        /** Required element 'xenc:CipherData' of XSD type 'xenc:CipherDataType' */
        struct xenc__CipherDataType *CipherData;
        /** Optional element 'xenc:EncryptionProperties' of XSD type 'xenc:EncryptionPropertiesType' */
        struct xenc__EncryptionPropertiesType *EncryptionProperties;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
        /** Optional attribute 'Type' of XSD type 'xsd:string' */
        char *Type;
        /** Optional attribute 'MimeType' of XSD type 'xsd:string' */
        char *MimeType;
        /** Optional attribute 'Encoding' of XSD type 'xsd:string' */
        char *Encoding;
      public:
        /** Return unique type id SOAP_TYPE_xenc__EncryptedType */
        int soap_type() const { return SOAP_TYPE_xenc__EncryptedType; }
        /** Constructor with member initializations */
        xenc__EncryptedType()
        {
          EncryptionMethod = (struct xenc__EncryptionMethodType *)0;
          ds__KeyInfo = (struct ds__KeyInfoType *)0;
          CipherData = (struct xenc__CipherDataType *)0;
          EncryptionProperties = (struct xenc__EncryptionPropertiesType *)0;
          Id = (char *)0;
          Type = (char *)0;
          MimeType = (char *)0;
          Encoding = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__EncryptedType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:56 */
#ifndef SOAP_TYPE_xenc__EncryptionMethodType
#define SOAP_TYPE_xenc__EncryptionMethodType (147)
/* complex XSD type 'xenc:EncryptionMethodType': */
struct xenc__EncryptionMethodType {
      public:
        /** Optional element 'xenc:KeySize' of XSD type 'xsd:int' */
        int *KeySize;
        /** Optional element 'xenc:OAEPparams' of XSD type 'xsd:string' */
        char *OAEPparams;
        /** Required attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
        /** Optional element 'ds:DigestMethod' of XSD type 'ds:DigestMethodType' */
        struct ds__DigestMethodType *ds__DigestMethod;
        char *__mixed;
      public:
        /** Return unique type id SOAP_TYPE_xenc__EncryptionMethodType */
        int soap_type() const { return SOAP_TYPE_xenc__EncryptionMethodType; }
        /** Constructor with member initializations */
        xenc__EncryptionMethodType()
        {
          KeySize = (int *)0;
          OAEPparams = (char *)0;
          Algorithm = (char *)0;
          ds__DigestMethod = (struct ds__DigestMethodType *)0;
          __mixed = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__EncryptionMethodType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:59 */
#ifndef SOAP_TYPE_xenc__CipherDataType
#define SOAP_TYPE_xenc__CipherDataType (148)
/* complex XSD type 'xenc:CipherDataType': */
struct xenc__CipherDataType {
      public:
        /** Optional element 'xenc:CipherValue' of XSD type 'xsd:string' */
        char *CipherValue;
        /** Optional element 'xenc:CipherReference' of XSD type 'xenc:CipherReferenceType' */
        struct xenc__CipherReferenceType *CipherReference;
      public:
        /** Return unique type id SOAP_TYPE_xenc__CipherDataType */
        int soap_type() const { return SOAP_TYPE_xenc__CipherDataType; }
        /** Constructor with member initializations */
        xenc__CipherDataType()
        {
          CipherValue = (char *)0;
          CipherReference = (struct xenc__CipherReferenceType *)0;
        }
        /** Friend allocator used by soap_new_xenc__CipherDataType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:62 */
#ifndef SOAP_TYPE_xenc__CipherReferenceType
#define SOAP_TYPE_xenc__CipherReferenceType (149)
/* complex XSD type 'xenc:CipherReferenceType': */
struct xenc__CipherReferenceType {
      public:
        /** Optional element 'xenc:Transforms' of XSD type 'xenc:TransformsType' */
        struct xenc__TransformsType *Transforms;
        /** Required attribute 'URI' of XSD type 'xsd:string' */
        char *URI;
      public:
        /** Return unique type id SOAP_TYPE_xenc__CipherReferenceType */
        int soap_type() const { return SOAP_TYPE_xenc__CipherReferenceType; }
        /** Constructor with member initializations */
        xenc__CipherReferenceType()
        {
          Transforms = (struct xenc__TransformsType *)0;
          URI = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__CipherReferenceType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:65 */
#ifndef SOAP_TYPE_xenc__TransformsType
#define SOAP_TYPE_xenc__TransformsType (150)
/* complex XSD type 'xenc:TransformsType': */
struct xenc__TransformsType {
      public:
        /** Required element 'ds:Transform' of XSD type 'ds:Transform' */
        struct ds__TransformType ds__Transform;
      public:
        /** Return unique type id SOAP_TYPE_xenc__TransformsType */
        int soap_type() const { return SOAP_TYPE_xenc__TransformsType; }
        /** Constructor with member initializations */
        xenc__TransformsType()
        {
        }
        /** Friend allocator used by soap_new_xenc__TransformsType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:74 */
#ifndef SOAP_TYPE_xenc__AgreementMethodType
#define SOAP_TYPE_xenc__AgreementMethodType (153)
/* complex XSD type 'xenc:AgreementMethodType': */
struct xenc__AgreementMethodType {
      public:
        /** Optional element 'xenc:KA-Nonce' of XSD type 'xsd:string' */
        char *KA_Nonce;
        /** Optional element 'xenc:OriginatorKeyInfo' of XSD type 'ds:KeyInfoType' */
        struct ds__KeyInfoType *OriginatorKeyInfo;
        /** Optional element 'xenc:RecipientKeyInfo' of XSD type 'ds:KeyInfoType' */
        struct ds__KeyInfoType *RecipientKeyInfo;
        /** Required attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
        char *__mixed;
      public:
        /** Return unique type id SOAP_TYPE_xenc__AgreementMethodType */
        int soap_type() const { return SOAP_TYPE_xenc__AgreementMethodType; }
        /** Constructor with member initializations */
        xenc__AgreementMethodType()
        {
          KA_Nonce = (char *)0;
          OriginatorKeyInfo = (struct ds__KeyInfoType *)0;
          RecipientKeyInfo = (struct ds__KeyInfoType *)0;
          Algorithm = (char *)0;
          __mixed = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__AgreementMethodType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:77 */
#ifndef SOAP_TYPE_xenc__ReferenceType
#define SOAP_TYPE_xenc__ReferenceType (154)
/* complex XSD type 'xenc:ReferenceType': */
struct xenc__ReferenceType {
      public:
        /** Required attribute 'URI' of XSD type 'xsd:string' */
        char *URI;
      public:
        /** Return unique type id SOAP_TYPE_xenc__ReferenceType */
        int soap_type() const { return SOAP_TYPE_xenc__ReferenceType; }
        /** Constructor with member initializations */
        xenc__ReferenceType()
        {
          URI = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__ReferenceType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:80 */
#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType
#define SOAP_TYPE_xenc__EncryptionPropertiesType (155)
/* complex XSD type 'xenc:EncryptionPropertiesType': */
struct xenc__EncryptionPropertiesType {
      public:
        /** Sequence of at least 1 elements 'xenc:EncryptionProperty' of XSD type 'xenc:EncryptionPropertyType' stored in dynamic array EncryptionProperty of length __sizeEncryptionProperty */
        int __sizeEncryptionProperty;
        struct xenc__EncryptionPropertyType *EncryptionProperty;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
      public:
        /** Return unique type id SOAP_TYPE_xenc__EncryptionPropertiesType */
        int soap_type() const { return SOAP_TYPE_xenc__EncryptionPropertiesType; }
        /** Constructor with member initializations */
        xenc__EncryptionPropertiesType()
        {
          __sizeEncryptionProperty = 0;
          EncryptionProperty = NULL;
          Id = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__EncryptionPropertiesType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:238 */
#ifndef SOAP_TYPE___xenc__union_ReferenceList
#define SOAP_TYPE___xenc__union_ReferenceList (165)
/* Wrapper: */
struct __xenc__union_ReferenceList {
      public:
        /** Optional element 'xenc:DataReference' of XSD type 'xenc:ReferenceType' */
        struct xenc__ReferenceType *DataReference;
        /** Optional element 'xenc:KeyReference' of XSD type 'xenc:ReferenceType' */
        struct xenc__ReferenceType *KeyReference;
      public:
        /** Return unique type id SOAP_TYPE___xenc__union_ReferenceList */
        int soap_type() const { return SOAP_TYPE___xenc__union_ReferenceList; }
        /** Constructor with member initializations */
        __xenc__union_ReferenceList()
        {
          DataReference = (struct xenc__ReferenceType *)0;
          KeyReference = (struct xenc__ReferenceType *)0;
        }
        /** Friend allocator used by soap_new___xenc__union_ReferenceList(struct soap*, int) */
        friend SOAP_FMAC1 __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:89 */
#ifndef SOAP_TYPE__xenc__ReferenceList
#define SOAP_TYPE__xenc__ReferenceList (157)
/* complex XSD type 'xenc:ReferenceList': */
struct _xenc__ReferenceList {
      public:
        /** Sequence of at least 1 elements '-union-ReferenceList' of XSD type '-xenc:union-ReferenceList' stored in dynamic array __union_ReferenceList of length __size_ReferenceList */
        int __size_ReferenceList;
        struct __xenc__union_ReferenceList *__union_ReferenceList;
      public:
        /** Return unique type id SOAP_TYPE__xenc__ReferenceList */
        int soap_type() const { return SOAP_TYPE__xenc__ReferenceList; }
        /** Constructor with member initializations */
        _xenc__ReferenceList()
        {
          __size_ReferenceList = 0;
          __union_ReferenceList = NULL;
        }
        /** Friend allocator used by soap_new__xenc__ReferenceList(struct soap*, int) */
        friend SOAP_FMAC1 _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:68 */
#ifndef SOAP_TYPE_xenc__EncryptedDataType
#define SOAP_TYPE_xenc__EncryptedDataType (151)
/* complex XSD type 'xenc:EncryptedDataType': */
struct xenc__EncryptedDataType {
      public:
        /** Optional element 'xenc:EncryptionMethod' of XSD type 'xenc:EncryptionMethodType' */
        struct xenc__EncryptionMethodType *EncryptionMethod;
        /** Optional element 'ds:KeyInfo' of XSD type 'ds:KeyInfo' */
        struct ds__KeyInfoType *ds__KeyInfo;
        /** Required element 'xenc:CipherData' of XSD type 'xenc:CipherDataType' */
        struct xenc__CipherDataType *CipherData;
        /** Optional element 'xenc:EncryptionProperties' of XSD type 'xenc:EncryptionPropertiesType' */
        struct xenc__EncryptionPropertiesType *EncryptionProperties;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
        /** Optional attribute 'Type' of XSD type 'xsd:string' */
        char *Type;
        /** Optional attribute 'MimeType' of XSD type 'xsd:string' */
        char *MimeType;
        /** Optional attribute 'Encoding' of XSD type 'xsd:string' */
        char *Encoding;
      public:
        /** Return unique type id SOAP_TYPE_xenc__EncryptedDataType */
        int soap_type() const { return SOAP_TYPE_xenc__EncryptedDataType; }
        /** Constructor with member initializations */
        xenc__EncryptedDataType()
        {
          EncryptionMethod = (struct xenc__EncryptionMethodType *)0;
          ds__KeyInfo = (struct ds__KeyInfoType *)0;
          CipherData = (struct xenc__CipherDataType *)0;
          EncryptionProperties = (struct xenc__EncryptionPropertiesType *)0;
          Id = (char *)0;
          Type = (char *)0;
          MimeType = (char *)0;
          Encoding = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__EncryptedDataType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* xenc.h:71 */
#ifndef SOAP_TYPE_xenc__EncryptedKeyType
#define SOAP_TYPE_xenc__EncryptedKeyType (152)
/* complex XSD type 'xenc:EncryptedKeyType': */
struct xenc__EncryptedKeyType {
      public:
        /** Optional element 'xenc:EncryptionMethod' of XSD type 'xenc:EncryptionMethodType' */
        struct xenc__EncryptionMethodType *EncryptionMethod;
        /** Optional element 'ds:KeyInfo' of XSD type 'ds:KeyInfo' */
        struct ds__KeyInfoType *ds__KeyInfo;
        /** Required element 'xenc:CipherData' of XSD type 'xenc:CipherDataType' */
        struct xenc__CipherDataType *CipherData;
        /** Optional element 'xenc:EncryptionProperties' of XSD type 'xenc:EncryptionPropertiesType' */
        struct xenc__EncryptionPropertiesType *EncryptionProperties;
        /** Optional attribute 'Id' of XSD type 'xsd:string' */
        char *Id;
        /** Optional attribute 'Type' of XSD type 'xsd:string' */
        char *Type;
        /** Optional attribute 'MimeType' of XSD type 'xsd:string' */
        char *MimeType;
        /** Optional attribute 'Encoding' of XSD type 'xsd:string' */
        char *Encoding;
        /** Optional element 'xenc:ReferenceList' of XSD type 'xenc:ReferenceList' */
        struct _xenc__ReferenceList *ReferenceList;
        /** Optional element 'xenc:CarriedKeyName' of XSD type 'xsd:string' */
        char *CarriedKeyName;
        /** Optional attribute 'Recipient' of XSD type 'xsd:string' */
        char *Recipient;
      public:
        /** Return unique type id SOAP_TYPE_xenc__EncryptedKeyType */
        int soap_type() const { return SOAP_TYPE_xenc__EncryptedKeyType; }
        /** Constructor with member initializations */
        xenc__EncryptedKeyType()
        {
          EncryptionMethod = (struct xenc__EncryptionMethodType *)0;
          ds__KeyInfo = (struct ds__KeyInfoType *)0;
          CipherData = (struct xenc__CipherDataType *)0;
          EncryptionProperties = (struct xenc__EncryptionPropertiesType *)0;
          Id = (char *)0;
          Type = (char *)0;
          MimeType = (char *)0;
          Encoding = (char *)0;
          ReferenceList = (struct _xenc__ReferenceList *)0;
          CarriedKeyName = (char *)0;
          Recipient = (char *)0;
        }
        /** Friend allocator used by soap_new_xenc__EncryptedKeyType(struct soap*, int) */
        friend SOAP_FMAC1 xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsc.h:87 */
#ifndef SOAP_TYPE_wsc__SecurityContextTokenType
#define SOAP_TYPE_wsc__SecurityContextTokenType (171)
/* complex XSD type 'wsc:SecurityContextTokenType': */
struct wsc__SecurityContextTokenType {
      public:
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional element 'wsc:Identifier' of XSD type 'xsd:string' */
        char *Identifier;
        /** Optional element 'wsc:Instance' of XSD type 'xsd:string' */
        char *Instance;
      public:
        /** Return unique type id SOAP_TYPE_wsc__SecurityContextTokenType */
        int soap_type() const { return SOAP_TYPE_wsc__SecurityContextTokenType; }
        /** Constructor with member initializations */
        wsc__SecurityContextTokenType()
        {
          wsu__Id = (char *)0;
          Identifier = (char *)0;
          Instance = (char *)0;
        }
        /** Friend allocator used by soap_new_wsc__SecurityContextTokenType(struct soap*, int) */
        friend SOAP_FMAC1 wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsc.h:125 */
#ifndef SOAP_TYPE__wsc__union_DerivedKeyTokenType
#define SOAP_TYPE__wsc__union_DerivedKeyTokenType (177)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _wsc__union_DerivedKeyTokenType
{
        #define SOAP_UNION__wsc__union_DerivedKeyTokenType_Generation	(1)	/**< union variant selector value for member Generation */
        ULONG64 Generation;
        #define SOAP_UNION__wsc__union_DerivedKeyTokenType_Offset	(2)	/**< union variant selector value for member Offset */
        ULONG64 Offset;
};
#endif

/* wsc.h:116 */
#ifndef SOAP_TYPE___wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE___wsc__DerivedKeyTokenType_sequence (175)
/* Wrapper: */
struct __wsc__DerivedKeyTokenType_sequence {
      public:
        /** Union with union _wsc__union_DerivedKeyTokenType variant selector __union_DerivedKeyTokenType set to one of: SOAP_UNION__wsc__union_DerivedKeyTokenType_Generation SOAP_UNION__wsc__union_DerivedKeyTokenType_Offset */
        int __union_DerivedKeyTokenType;
        union _wsc__union_DerivedKeyTokenType union_DerivedKeyTokenType;
        /** Optional element 'wsc:Length' of XSD type 'xsd:unsignedLong' */
        ULONG64 *Length;
      public:
        /** Return unique type id SOAP_TYPE___wsc__DerivedKeyTokenType_sequence */
        int soap_type() const { return SOAP_TYPE___wsc__DerivedKeyTokenType_sequence; }
        /** Constructor with member initializations */
        __wsc__DerivedKeyTokenType_sequence()
        {
          __union_DerivedKeyTokenType = -1;
          Length = (ULONG64 *)0;
        }
        /** Friend allocator used by soap_new___wsc__DerivedKeyTokenType_sequence(struct soap*, int) */
        friend SOAP_FMAC1 __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsc.h:109 */
#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType
#define SOAP_TYPE_wsc__DerivedKeyTokenType (172)
/* complex XSD type 'wsc:DerivedKeyTokenType': */
struct wsc__DerivedKeyTokenType {
      public:
        /** Optional element 'wsse:SecurityTokenReference' of XSD type 'wsse:SecurityTokenReference' */
        struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;
        /** Optional element 'wsc:Properties' of XSD type 'wsc:PropertiesType' */
        struct wsc__PropertiesType *Properties;
        struct __wsc__DerivedKeyTokenType_sequence *__DerivedKeyTokenType_sequence;
        /** Optional element 'wsc:Label' of XSD type 'xsd:string' */
        char *Label;
        /** Optional element 'wsc:Nonce' of XSD type 'xsd:string' */
        char *Nonce;
        /** Optional attribute 'wsu:Id' of XSD type 'xsd:string' */
        char *wsu__Id;
        /** Optional attribute 'Algorithm' of XSD type 'xsd:string' */
        char *Algorithm;
      public:
        /** Return unique type id SOAP_TYPE_wsc__DerivedKeyTokenType */
        int soap_type() const { return SOAP_TYPE_wsc__DerivedKeyTokenType; }
        /** Constructor with member initializations */
        wsc__DerivedKeyTokenType()
        {
          wsse__SecurityTokenReference = (struct _wsse__SecurityTokenReference *)0;
          Properties = (struct wsc__PropertiesType *)0;
          __DerivedKeyTokenType_sequence = (struct __wsc__DerivedKeyTokenType_sequence *)0;
          Label = (char *)0;
          Nonce = (char *)0;
          wsu__Id = (char *)0;
          Algorithm = (char *)0;
        }
        /** Friend allocator used by soap_new_wsc__DerivedKeyTokenType(struct soap*, int) */
        friend SOAP_FMAC1 wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsc.h:113 */
#ifndef SOAP_TYPE_wsc__PropertiesType
#define SOAP_TYPE_wsc__PropertiesType (173)
/* complex XSD type 'wsc:PropertiesType': */
struct wsc__PropertiesType {
      public:
        /** Return unique type id SOAP_TYPE_wsc__PropertiesType */
        int soap_type() const { return SOAP_TYPE_wsc__PropertiesType; }
        /** Constructor with member initializations */
        wsc__PropertiesType()
        {
        }
        /** Friend allocator used by soap_new_wsc__PropertiesType(struct soap*, int) */
        friend SOAP_FMAC1 wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:177 */
#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (180)
/* complex XSD type 'wsse:Security': */
struct _wsse__Security {
      public:
        /** Optional element 'wsu:Timestamp' of XSD type 'wsu:Timestamp' */
        struct _wsu__Timestamp *wsu__Timestamp;
        /** Optional element 'wsse:UsernameToken' of XSD type 'wsse:UsernameToken' */
        struct _wsse__UsernameToken *UsernameToken;
        /** Optional element 'wsse:BinarySecurityToken' of XSD type 'wsse:BinarySecurityToken' */
        struct _wsse__BinarySecurityToken *BinarySecurityToken;
        /** Optional element 'xenc:EncryptedKey' of XSD type 'xenc:EncryptedKeyType' */
        struct xenc__EncryptedKeyType *xenc__EncryptedKey;
        /** Optional element 'xenc:ReferenceList' of XSD type 'xenc:ReferenceList' */
        struct _xenc__ReferenceList *xenc__ReferenceList;
        /** Optional element 'wsc:SecurityContextToken' of XSD type 'wsc:SecurityContextTokenType' */
        struct wsc__SecurityContextTokenType *wsc__SecurityContextToken;
        /** Optional element 'ds:Signature' of XSD type 'ds:SignatureType' */
        struct ds__SignatureType *ds__Signature;
        /** Optional attribute 'SOAP-ENV:actor' of XSD type 'xsd:string' */
        char *SOAP_ENV__actor;
        /** Optional attribute 'SOAP-ENV:role' of XSD type 'xsd:string' */
        char *SOAP_ENV__role;
      public:
        /** Return unique type id SOAP_TYPE__wsse__Security */
        int soap_type() const { return SOAP_TYPE__wsse__Security; }
        /** Constructor with member initializations */
        _wsse__Security()
        {
          wsu__Timestamp = (struct _wsu__Timestamp *)0;
          UsernameToken = (struct _wsse__UsernameToken *)0;
          BinarySecurityToken = (struct _wsse__BinarySecurityToken *)0;
          xenc__EncryptedKey = (struct xenc__EncryptedKeyType *)0;
          xenc__ReferenceList = (struct _xenc__ReferenceList *)0;
          wsc__SecurityContextToken = (struct wsc__SecurityContextTokenType *)0;
          ds__Signature = (struct ds__SignatureType *)0;
          SOAP_ENV__actor = (char *)0;
          SOAP_ENV__role = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__Security(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* wsse.h:115 */
#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (99)
/* simple XSD type 'wsse:Password': */
struct _wsse__Password {
      public:
        /** Simple content of XSD type 'xsd:string' wrapped by this struct */
        char *__item;
        /** Optional attribute 'Type' of XSD type 'xsd:string' */
        char *Type;
      public:
        /** Return unique type id SOAP_TYPE__wsse__Password */
        int soap_type() const { return SOAP_TYPE__wsse__Password; }
        /** Constructor with member initializations */
        _wsse__Password()
        {
          __item = (char *)0;
          Type = (char *)0;
        }
        /** Friend allocator used by soap_new__wsse__Password(struct soap*, int) */
        friend SOAP_FMAC1 _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* CCMovelSignature.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* CCMovelSignature.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/* CCMovelSignature.h:592 */
#ifndef SOAP_TYPE__ns3__SignRequest
#define SOAP_TYPE__ns3__SignRequest (39)
typedef ns3__SignRequest _ns3__SignRequest;
#endif

/* CCMovelSignature.h:595 */
#ifndef SOAP_TYPE__ns3__SignStatus
#define SOAP_TYPE__ns3__SignStatus (40)
typedef ns3__SignStatus _ns3__SignStatus;
#endif

/* CCMovelSignature.h:598 */
#ifndef SOAP_TYPE__ns3__ValidationRequest
#define SOAP_TYPE__ns3__ValidationRequest (41)
typedef ns3__ValidationRequest _ns3__ValidationRequest;
#endif

/* CCMovelSignature.h:601 */
#ifndef SOAP_TYPE__ns3__ValidationResponse
#define SOAP_TYPE__ns3__ValidationResponse (42)
typedef ns3__ValidationResponse _ns3__ValidationResponse;
#endif

/* CCMovelSignature.h:604 */
#ifndef SOAP_TYPE__ns3__SignResponse
#define SOAP_TYPE__ns3__SignResponse (43)
typedef ns3__SignResponse _ns3__SignResponse;
#endif

/* wsa.h:220 */
#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (56)
typedef struct wsa__EndpointReferenceType _wsa__EndpointReference;
#endif

/* wsa.h:223 */
#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (57)
typedef char *_wsa__MessageID;
#endif

/* wsa.h:226 */
#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (58)
typedef struct wsa__Relationship _wsa__RelatesTo;
#endif

/* wsa.h:229 */
#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (59)
typedef char *_wsa__To;
#endif

/* wsa.h:232 */
#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (60)
typedef char *_wsa__Action;
#endif

/* wsa.h:235 */
#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (61)
typedef struct wsa__EndpointReferenceType _wsa__From;
#endif

/* wsa.h:238 */
#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (62)
typedef struct wsa__EndpointReferenceType _wsa__ReplyTo;
#endif

/* wsa.h:241 */
#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (63)
typedef struct wsa__EndpointReferenceType _wsa__FaultTo;
#endif

/* wsa.h:244 */
#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (64)
typedef unsigned int _wsa__ReplyAfter;
#endif

/* ds.h:51 */
#ifndef SOAP_TYPE__ds__Signature
#define SOAP_TYPE__ds__Signature (116)
typedef struct ds__SignatureType _ds__Signature;
#endif

/* ds.h:77 */
#ifndef SOAP_TYPE__ds__Transform
#define SOAP_TYPE__ds__Transform (124)
typedef struct ds__TransformType _ds__Transform;
#endif

/* ds.h:91 */
#ifndef SOAP_TYPE__ds__KeyInfo
#define SOAP_TYPE__ds__KeyInfo (131)
typedef struct ds__KeyInfoType _ds__KeyInfo;
#endif

/* wsc.h:57 */
#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType (169)
typedef char *wsc__FaultCodeOpenEnumType;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (13)
#endif

/* _wsa__ReplyAfter has binding name '_wsa__ReplyAfter' for type '' */
#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (64)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (12)
#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (176)
#endif

/* enum wsc__FaultCodeType has binding name 'wsc__FaultCodeType' for type 'wsc:FaultCodeType' */
#ifndef SOAP_TYPE_wsc__FaultCodeType
#define SOAP_TYPE_wsc__FaultCodeType (170)
#endif

/* enum wsse__FaultcodeEnum has binding name 'wsse__FaultcodeEnum' for type 'wsse:FaultcodeEnum' */
#ifndef SOAP_TYPE_wsse__FaultcodeEnum
#define SOAP_TYPE_wsse__FaultcodeEnum (97)
#endif

/* enum wsu__tTimestampFault has binding name 'wsu__tTimestampFault' for type 'wsu:tTimestampFault' */
#ifndef SOAP_TYPE_wsu__tTimestampFault
#define SOAP_TYPE_wsu__tTimestampFault (95)
#endif

/* enum wsa__FaultSubcodeValues has binding name 'wsa__FaultSubcodeValues' for type 'wsa:FaultSubcodeValues' */
#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (50)
#endif

/* enum wsa__RelationshipTypeValues has binding name 'wsa__RelationshipTypeValues' for type 'wsa:RelationshipTypeValues' */
#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (49)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (37)
#endif

/* _ns3__SignResponse has binding name '_ns3__SignResponse' for type '' */
#ifndef SOAP_TYPE__ns3__SignResponse
#define SOAP_TYPE__ns3__SignResponse (43)
#endif

/* _ns3__ValidationResponse has binding name '_ns3__ValidationResponse' for type '' */
#ifndef SOAP_TYPE__ns3__ValidationResponse
#define SOAP_TYPE__ns3__ValidationResponse (42)
#endif

/* _ns3__ValidationRequest has binding name '_ns3__ValidationRequest' for type '' */
#ifndef SOAP_TYPE__ns3__ValidationRequest
#define SOAP_TYPE__ns3__ValidationRequest (41)
#endif

/* _ns3__SignStatus has binding name '_ns3__SignStatus' for type '' */
#ifndef SOAP_TYPE__ns3__SignStatus
#define SOAP_TYPE__ns3__SignStatus (40)
#endif

/* _ns3__SignRequest has binding name '_ns3__SignRequest' for type '' */
#ifndef SOAP_TYPE__ns3__SignRequest
#define SOAP_TYPE__ns3__SignRequest (39)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (34)
#endif

/* ns3__SignResponse has binding name 'ns3__SignResponse' for type 'ns3:SignResponse' */
#ifndef SOAP_TYPE_ns3__SignResponse
#define SOAP_TYPE_ns3__SignResponse (28)
#endif

/* ns3__ValidationResponse has binding name 'ns3__ValidationResponse' for type 'ns3:ValidationResponse' */
#ifndef SOAP_TYPE_ns3__ValidationResponse
#define SOAP_TYPE_ns3__ValidationResponse (27)
#endif

/* ns3__ValidationRequest has binding name 'ns3__ValidationRequest' for type 'ns3:ValidationRequest' */
#ifndef SOAP_TYPE_ns3__ValidationRequest
#define SOAP_TYPE_ns3__ValidationRequest (26)
#endif

/* ns3__SignStatus has binding name 'ns3__SignStatus' for type 'ns3:SignStatus' */
#ifndef SOAP_TYPE_ns3__SignStatus
#define SOAP_TYPE_ns3__SignStatus (25)
#endif

/* ns3__SignRequest has binding name 'ns3__SignRequest' for type 'ns3:SignRequest' */
#ifndef SOAP_TYPE_ns3__SignRequest
#define SOAP_TYPE_ns3__SignRequest (24)
#endif

/* _ns2__ValidateOtpResponse has binding name '_ns2__ValidateOtpResponse' for type '' */
#ifndef SOAP_TYPE__ns2__ValidateOtpResponse
#define SOAP_TYPE__ns2__ValidateOtpResponse (23)
#endif

/* _ns2__ValidateOtp has binding name '_ns2__ValidateOtp' for type '' */
#ifndef SOAP_TYPE__ns2__ValidateOtp
#define SOAP_TYPE__ns2__ValidateOtp (22)
#endif

/* _ns2__GetCertificateResponse has binding name '_ns2__GetCertificateResponse' for type '' */
#ifndef SOAP_TYPE__ns2__GetCertificateResponse
#define SOAP_TYPE__ns2__GetCertificateResponse (21)
#endif

/* _ns2__GetCertificate has binding name '_ns2__GetCertificate' for type '' */
#ifndef SOAP_TYPE__ns2__GetCertificate
#define SOAP_TYPE__ns2__GetCertificate (20)
#endif

/* _ns2__CCMovelValidateSignatureResponse has binding name '_ns2__CCMovelValidateSignatureResponse' for type '' */
#ifndef SOAP_TYPE__ns2__CCMovelValidateSignatureResponse
#define SOAP_TYPE__ns2__CCMovelValidateSignatureResponse (19)
#endif

/* _ns2__CCMovelValidateSignature has binding name '_ns2__CCMovelValidateSignature' for type '' */
#ifndef SOAP_TYPE__ns2__CCMovelValidateSignature
#define SOAP_TYPE__ns2__CCMovelValidateSignature (18)
#endif

/* _ns2__CCMovelSignResponse has binding name '_ns2__CCMovelSignResponse' for type '' */
#ifndef SOAP_TYPE__ns2__CCMovelSignResponse
#define SOAP_TYPE__ns2__CCMovelSignResponse (17)
#endif

/* _ns2__CCMovelSign has binding name '_ns2__CCMovelSign' for type '' */
#ifndef SOAP_TYPE__ns2__CCMovelSign
#define SOAP_TYPE__ns2__CCMovelSign (16)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (11)
#endif

/* struct _wsse__Security has binding name '_wsse__Security' for type '' */
#ifndef SOAP_TYPE__wsse__Security
#define SOAP_TYPE__wsse__Security (180)
#endif

/* struct wsc__PropertiesType has binding name 'wsc__PropertiesType' for type 'wsc:PropertiesType' */
#ifndef SOAP_TYPE_wsc__PropertiesType
#define SOAP_TYPE_wsc__PropertiesType (173)
#endif

/* struct wsc__DerivedKeyTokenType has binding name 'wsc__DerivedKeyTokenType' for type 'wsc:DerivedKeyTokenType' */
#ifndef SOAP_TYPE_wsc__DerivedKeyTokenType
#define SOAP_TYPE_wsc__DerivedKeyTokenType (172)
#endif

/* struct wsc__SecurityContextTokenType has binding name 'wsc__SecurityContextTokenType' for type 'wsc:SecurityContextTokenType' */
#ifndef SOAP_TYPE_wsc__SecurityContextTokenType
#define SOAP_TYPE_wsc__SecurityContextTokenType (171)
#endif

/* struct _xenc__ReferenceList has binding name '_xenc__ReferenceList' for type '' */
#ifndef SOAP_TYPE__xenc__ReferenceList
#define SOAP_TYPE__xenc__ReferenceList (157)
#endif

/* struct xenc__EncryptionPropertyType has binding name 'xenc__EncryptionPropertyType' for type 'xenc:EncryptionPropertyType' */
#ifndef SOAP_TYPE_xenc__EncryptionPropertyType
#define SOAP_TYPE_xenc__EncryptionPropertyType (156)
#endif

/* struct xenc__EncryptionPropertiesType has binding name 'xenc__EncryptionPropertiesType' for type 'xenc:EncryptionPropertiesType' */
#ifndef SOAP_TYPE_xenc__EncryptionPropertiesType
#define SOAP_TYPE_xenc__EncryptionPropertiesType (155)
#endif

/* struct xenc__ReferenceType has binding name 'xenc__ReferenceType' for type 'xenc:ReferenceType' */
#ifndef SOAP_TYPE_xenc__ReferenceType
#define SOAP_TYPE_xenc__ReferenceType (154)
#endif

/* struct xenc__AgreementMethodType has binding name 'xenc__AgreementMethodType' for type 'xenc:AgreementMethodType' */
#ifndef SOAP_TYPE_xenc__AgreementMethodType
#define SOAP_TYPE_xenc__AgreementMethodType (153)
#endif

/* struct xenc__EncryptedKeyType has binding name 'xenc__EncryptedKeyType' for type 'xenc:EncryptedKeyType' */
#ifndef SOAP_TYPE_xenc__EncryptedKeyType
#define SOAP_TYPE_xenc__EncryptedKeyType (152)
#endif

/* struct xenc__EncryptedDataType has binding name 'xenc__EncryptedDataType' for type 'xenc:EncryptedDataType' */
#ifndef SOAP_TYPE_xenc__EncryptedDataType
#define SOAP_TYPE_xenc__EncryptedDataType (151)
#endif

/* struct xenc__TransformsType has binding name 'xenc__TransformsType' for type 'xenc:TransformsType' */
#ifndef SOAP_TYPE_xenc__TransformsType
#define SOAP_TYPE_xenc__TransformsType (150)
#endif

/* struct xenc__CipherReferenceType has binding name 'xenc__CipherReferenceType' for type 'xenc:CipherReferenceType' */
#ifndef SOAP_TYPE_xenc__CipherReferenceType
#define SOAP_TYPE_xenc__CipherReferenceType (149)
#endif

/* struct xenc__CipherDataType has binding name 'xenc__CipherDataType' for type 'xenc:CipherDataType' */
#ifndef SOAP_TYPE_xenc__CipherDataType
#define SOAP_TYPE_xenc__CipherDataType (148)
#endif

/* struct xenc__EncryptionMethodType has binding name 'xenc__EncryptionMethodType' for type 'xenc:EncryptionMethodType' */
#ifndef SOAP_TYPE_xenc__EncryptionMethodType
#define SOAP_TYPE_xenc__EncryptionMethodType (147)
#endif

/* struct xenc__EncryptedType has binding name 'xenc__EncryptedType' for type 'xenc:EncryptedType' */
#ifndef SOAP_TYPE_xenc__EncryptedType
#define SOAP_TYPE_xenc__EncryptedType (146)
#endif

/* struct ds__RSAKeyValueType has binding name 'ds__RSAKeyValueType' for type 'ds:RSAKeyValueType' */
#ifndef SOAP_TYPE_ds__RSAKeyValueType
#define SOAP_TYPE_ds__RSAKeyValueType (134)
#endif

/* struct ds__DSAKeyValueType has binding name 'ds__DSAKeyValueType' for type 'ds:DSAKeyValueType' */
#ifndef SOAP_TYPE_ds__DSAKeyValueType
#define SOAP_TYPE_ds__DSAKeyValueType (133)
#endif

/* struct ds__X509IssuerSerialType has binding name 'ds__X509IssuerSerialType' for type 'ds:X509IssuerSerialType' */
#ifndef SOAP_TYPE_ds__X509IssuerSerialType
#define SOAP_TYPE_ds__X509IssuerSerialType (132)
#endif

/* _ds__KeyInfo has binding name '_ds__KeyInfo' for type '' */
#ifndef SOAP_TYPE__ds__KeyInfo
#define SOAP_TYPE__ds__KeyInfo (131)
#endif

/* struct ds__RetrievalMethodType has binding name 'ds__RetrievalMethodType' for type 'ds:RetrievalMethodType' */
#ifndef SOAP_TYPE_ds__RetrievalMethodType
#define SOAP_TYPE_ds__RetrievalMethodType (128)
#endif

/* struct ds__KeyValueType has binding name 'ds__KeyValueType' for type 'ds:KeyValueType' */
#ifndef SOAP_TYPE_ds__KeyValueType
#define SOAP_TYPE_ds__KeyValueType (126)
#endif

/* struct ds__DigestMethodType has binding name 'ds__DigestMethodType' for type 'ds:DigestMethodType' */
#ifndef SOAP_TYPE_ds__DigestMethodType
#define SOAP_TYPE_ds__DigestMethodType (125)
#endif

/* _ds__Transform has binding name '_ds__Transform' for type '' */
#ifndef SOAP_TYPE__ds__Transform
#define SOAP_TYPE__ds__Transform (124)
#endif

/* struct ds__TransformType has binding name 'ds__TransformType' for type 'ds:TransformType' */
#ifndef SOAP_TYPE_ds__TransformType
#define SOAP_TYPE_ds__TransformType (122)
#endif

/* struct _c14n__InclusiveNamespaces has binding name '_c14n__InclusiveNamespaces' for type '' */
#ifndef SOAP_TYPE__c14n__InclusiveNamespaces
#define SOAP_TYPE__c14n__InclusiveNamespaces (121)
#endif

/* struct ds__TransformsType has binding name 'ds__TransformsType' for type 'ds:TransformsType' */
#ifndef SOAP_TYPE_ds__TransformsType
#define SOAP_TYPE_ds__TransformsType (120)
#endif

/* struct ds__ReferenceType has binding name 'ds__ReferenceType' for type 'ds:ReferenceType' */
#ifndef SOAP_TYPE_ds__ReferenceType
#define SOAP_TYPE_ds__ReferenceType (119)
#endif

/* struct ds__SignatureMethodType has binding name 'ds__SignatureMethodType' for type 'ds:SignatureMethodType' */
#ifndef SOAP_TYPE_ds__SignatureMethodType
#define SOAP_TYPE_ds__SignatureMethodType (118)
#endif

/* struct ds__CanonicalizationMethodType has binding name 'ds__CanonicalizationMethodType' for type 'ds:CanonicalizationMethodType' */
#ifndef SOAP_TYPE_ds__CanonicalizationMethodType
#define SOAP_TYPE_ds__CanonicalizationMethodType (117)
#endif

/* _ds__Signature has binding name '_ds__Signature' for type '' */
#ifndef SOAP_TYPE__ds__Signature
#define SOAP_TYPE__ds__Signature (116)
#endif

/* struct ds__KeyInfoType has binding name 'ds__KeyInfoType' for type 'ds:KeyInfoType' */
#ifndef SOAP_TYPE_ds__KeyInfoType
#define SOAP_TYPE_ds__KeyInfoType (114)
#endif

/* struct ds__SignedInfoType has binding name 'ds__SignedInfoType' for type 'ds:SignedInfoType' */
#ifndef SOAP_TYPE_ds__SignedInfoType
#define SOAP_TYPE_ds__SignedInfoType (112)
#endif

/* struct ds__SignatureType has binding name 'ds__SignatureType' for type 'ds:SignatureType' */
#ifndef SOAP_TYPE_ds__SignatureType
#define SOAP_TYPE_ds__SignatureType (111)
#endif

/* struct ds__X509DataType has binding name 'ds__X509DataType' for type 'ds:X509DataType' */
#ifndef SOAP_TYPE_ds__X509DataType
#define SOAP_TYPE_ds__X509DataType (109)
#endif

/* struct _wsse__SecurityTokenReference has binding name '_wsse__SecurityTokenReference' for type '' */
#ifndef SOAP_TYPE__wsse__SecurityTokenReference
#define SOAP_TYPE__wsse__SecurityTokenReference (105)
#endif

/* struct _wsse__KeyIdentifier has binding name '_wsse__KeyIdentifier' for type '' */
#ifndef SOAP_TYPE__wsse__KeyIdentifier
#define SOAP_TYPE__wsse__KeyIdentifier (104)
#endif

/* struct _wsse__Embedded has binding name '_wsse__Embedded' for type '' */
#ifndef SOAP_TYPE__wsse__Embedded
#define SOAP_TYPE__wsse__Embedded (103)
#endif

/* struct _wsse__Reference has binding name '_wsse__Reference' for type '' */
#ifndef SOAP_TYPE__wsse__Reference
#define SOAP_TYPE__wsse__Reference (102)
#endif

/* struct _wsse__BinarySecurityToken has binding name '_wsse__BinarySecurityToken' for type '' */
#ifndef SOAP_TYPE__wsse__BinarySecurityToken
#define SOAP_TYPE__wsse__BinarySecurityToken (101)
#endif

/* struct _wsse__Password has binding name '_wsse__Password' for type '' */
#ifndef SOAP_TYPE__wsse__Password
#define SOAP_TYPE__wsse__Password (99)
#endif

/* struct _wsse__UsernameToken has binding name '_wsse__UsernameToken' for type '' */
#ifndef SOAP_TYPE__wsse__UsernameToken
#define SOAP_TYPE__wsse__UsernameToken (98)
#endif

/* struct _wsu__Timestamp has binding name '_wsu__Timestamp' for type '' */
#ifndef SOAP_TYPE__wsu__Timestamp
#define SOAP_TYPE__wsu__Timestamp (96)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (78)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (74)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (72)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (70)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (65)
#endif

/* _wsa__FaultTo has binding name '_wsa__FaultTo' for type '' */
#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (63)
#endif

/* _wsa__ReplyTo has binding name '_wsa__ReplyTo' for type '' */
#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (62)
#endif

/* _wsa__From has binding name '_wsa__From' for type '' */
#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (61)
#endif

/* _wsa__RelatesTo has binding name '_wsa__RelatesTo' for type '' */
#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (58)
#endif

/* _wsa__EndpointReference has binding name '_wsa__EndpointReference' for type '' */
#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (56)
#endif

/* struct wsa__Relationship has binding name 'wsa__Relationship' for type 'wsa:Relationship' */
#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (48)
#endif

/* struct wsa__ServiceNameType has binding name 'wsa__ServiceNameType' for type 'wsa:ServiceNameType' */
#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (47)
#endif

/* struct wsa__ReferenceParametersType has binding name 'wsa__ReferenceParametersType' for type 'wsa:ReferenceParametersType' */
#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (46)
#endif

/* struct wsa__ReferencePropertiesType has binding name 'wsa__ReferencePropertiesType' for type 'wsa:ReferencePropertiesType' */
#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (45)
#endif

/* struct wsa__EndpointReferenceType has binding name 'wsa__EndpointReferenceType' for type 'wsa:EndpointReferenceType' */
#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (44)
#endif

/* struct _wsse__Security * has binding name 'PointerTo_wsse__Security' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__Security
#define SOAP_TYPE_PointerTo_wsse__Security (187)
#endif

/* struct ds__SignatureType * has binding name 'PointerTods__SignatureType' for type 'ds:SignatureType' */
#ifndef SOAP_TYPE_PointerTods__SignatureType
#define SOAP_TYPE_PointerTods__SignatureType (186)
#endif

/* struct wsc__SecurityContextTokenType * has binding name 'PointerTowsc__SecurityContextTokenType' for type 'wsc:SecurityContextTokenType' */
#ifndef SOAP_TYPE_PointerTowsc__SecurityContextTokenType
#define SOAP_TYPE_PointerTowsc__SecurityContextTokenType (185)
#endif

/* struct xenc__EncryptedKeyType * has binding name 'PointerToxenc__EncryptedKeyType' for type 'xenc:EncryptedKeyType' */
#ifndef SOAP_TYPE_PointerToxenc__EncryptedKeyType
#define SOAP_TYPE_PointerToxenc__EncryptedKeyType (184)
#endif

/* struct _wsse__BinarySecurityToken * has binding name 'PointerTo_wsse__BinarySecurityToken' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__BinarySecurityToken
#define SOAP_TYPE_PointerTo_wsse__BinarySecurityToken (183)
#endif

/* struct _wsse__UsernameToken * has binding name 'PointerTo_wsse__UsernameToken' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__UsernameToken
#define SOAP_TYPE_PointerTo_wsse__UsernameToken (182)
#endif

/* struct _wsu__Timestamp * has binding name 'PointerTo_wsu__Timestamp' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsu__Timestamp
#define SOAP_TYPE_PointerTo_wsu__Timestamp (181)
#endif

/* struct __wsc__DerivedKeyTokenType_sequence * has binding name 'PointerTo__wsc__DerivedKeyTokenType_sequence' for type '-wsc:DerivedKeyTokenType-sequence' */
#ifndef SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence
#define SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence (179)
#endif

/* ULONG64 * has binding name 'PointerToULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_PointerToULONG64
#define SOAP_TYPE_PointerToULONG64 (178)
#endif

/* struct wsc__PropertiesType * has binding name 'PointerTowsc__PropertiesType' for type 'wsc:PropertiesType' */
#ifndef SOAP_TYPE_PointerTowsc__PropertiesType
#define SOAP_TYPE_PointerTowsc__PropertiesType (174)
#endif

/* wsc__FaultCodeOpenEnumType has binding name 'wsc__FaultCodeOpenEnumType' for type 'wsc:FaultCodeOpenEnumType' */
#ifndef SOAP_TYPE_wsc__FaultCodeOpenEnumType
#define SOAP_TYPE_wsc__FaultCodeOpenEnumType (169)
#endif

/* struct _xenc__ReferenceList * has binding name 'PointerTo_xenc__ReferenceList' for type '' */
#ifndef SOAP_TYPE_PointerTo_xenc__ReferenceList
#define SOAP_TYPE_PointerTo_xenc__ReferenceList (168)
#endif

/* struct __xenc__union_ReferenceList * has binding name 'PointerTo__xenc__union_ReferenceList' for type '-xenc:union-ReferenceList' */
#ifndef SOAP_TYPE_PointerTo__xenc__union_ReferenceList
#define SOAP_TYPE_PointerTo__xenc__union_ReferenceList (167)
#endif

/* struct xenc__ReferenceType * has binding name 'PointerToxenc__ReferenceType' for type 'xenc:ReferenceType' */
#ifndef SOAP_TYPE_PointerToxenc__ReferenceType
#define SOAP_TYPE_PointerToxenc__ReferenceType (166)
#endif

/* struct xenc__EncryptionPropertyType * has binding name 'PointerToxenc__EncryptionPropertyType' for type 'xenc:EncryptionPropertyType' */
#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertyType
#define SOAP_TYPE_PointerToxenc__EncryptionPropertyType (164)
#endif

/* struct xenc__TransformsType * has binding name 'PointerToxenc__TransformsType' for type 'xenc:TransformsType' */
#ifndef SOAP_TYPE_PointerToxenc__TransformsType
#define SOAP_TYPE_PointerToxenc__TransformsType (163)
#endif

/* struct xenc__CipherReferenceType * has binding name 'PointerToxenc__CipherReferenceType' for type 'xenc:CipherReferenceType' */
#ifndef SOAP_TYPE_PointerToxenc__CipherReferenceType
#define SOAP_TYPE_PointerToxenc__CipherReferenceType (162)
#endif

/* struct xenc__EncryptionPropertiesType * has binding name 'PointerToxenc__EncryptionPropertiesType' for type 'xenc:EncryptionPropertiesType' */
#ifndef SOAP_TYPE_PointerToxenc__EncryptionPropertiesType
#define SOAP_TYPE_PointerToxenc__EncryptionPropertiesType (161)
#endif

/* struct xenc__CipherDataType * has binding name 'PointerToxenc__CipherDataType' for type 'xenc:CipherDataType' */
#ifndef SOAP_TYPE_PointerToxenc__CipherDataType
#define SOAP_TYPE_PointerToxenc__CipherDataType (160)
#endif

/* struct ds__KeyInfoType * has binding name 'PointerTo_ds__KeyInfo' for type '' */
#ifndef SOAP_TYPE_PointerTo_ds__KeyInfo
#define SOAP_TYPE_PointerTo_ds__KeyInfo (159)
#endif

/* struct xenc__EncryptionMethodType * has binding name 'PointerToxenc__EncryptionMethodType' for type 'xenc:EncryptionMethodType' */
#ifndef SOAP_TYPE_PointerToxenc__EncryptionMethodType
#define SOAP_TYPE_PointerToxenc__EncryptionMethodType (158)
#endif

/* struct ds__X509IssuerSerialType * has binding name 'PointerTods__X509IssuerSerialType' for type 'ds:X509IssuerSerialType' */
#ifndef SOAP_TYPE_PointerTods__X509IssuerSerialType
#define SOAP_TYPE_PointerTods__X509IssuerSerialType (145)
#endif

/* struct ds__RSAKeyValueType * has binding name 'PointerTods__RSAKeyValueType' for type 'ds:RSAKeyValueType' */
#ifndef SOAP_TYPE_PointerTods__RSAKeyValueType
#define SOAP_TYPE_PointerTods__RSAKeyValueType (144)
#endif

/* struct ds__DSAKeyValueType * has binding name 'PointerTods__DSAKeyValueType' for type 'ds:DSAKeyValueType' */
#ifndef SOAP_TYPE_PointerTods__DSAKeyValueType
#define SOAP_TYPE_PointerTods__DSAKeyValueType (143)
#endif

/* struct ds__TransformType * has binding name 'PointerTods__TransformType' for type 'ds:TransformType' */
#ifndef SOAP_TYPE_PointerTods__TransformType
#define SOAP_TYPE_PointerTods__TransformType (142)
#endif

/* struct ds__DigestMethodType * has binding name 'PointerTods__DigestMethodType' for type 'ds:DigestMethodType' */
#ifndef SOAP_TYPE_PointerTods__DigestMethodType
#define SOAP_TYPE_PointerTods__DigestMethodType (141)
#endif

/* struct ds__TransformsType * has binding name 'PointerTods__TransformsType' for type 'ds:TransformsType' */
#ifndef SOAP_TYPE_PointerTods__TransformsType
#define SOAP_TYPE_PointerTods__TransformsType (140)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (139)
#endif

/* struct ds__ReferenceType ** has binding name 'PointerToPointerTods__ReferenceType' for type 'ds:ReferenceType' */
#ifndef SOAP_TYPE_PointerToPointerTods__ReferenceType
#define SOAP_TYPE_PointerToPointerTods__ReferenceType (138)
#endif

/* struct ds__ReferenceType * has binding name 'PointerTods__ReferenceType' for type 'ds:ReferenceType' */
#ifndef SOAP_TYPE_PointerTods__ReferenceType
#define SOAP_TYPE_PointerTods__ReferenceType (137)
#endif

/* struct ds__SignatureMethodType * has binding name 'PointerTods__SignatureMethodType' for type 'ds:SignatureMethodType' */
#ifndef SOAP_TYPE_PointerTods__SignatureMethodType
#define SOAP_TYPE_PointerTods__SignatureMethodType (136)
#endif

/* struct ds__CanonicalizationMethodType * has binding name 'PointerTods__CanonicalizationMethodType' for type 'ds:CanonicalizationMethodType' */
#ifndef SOAP_TYPE_PointerTods__CanonicalizationMethodType
#define SOAP_TYPE_PointerTods__CanonicalizationMethodType (135)
#endif

/* struct _wsse__SecurityTokenReference * has binding name 'PointerTo_wsse__SecurityTokenReference' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__SecurityTokenReference
#define SOAP_TYPE_PointerTo_wsse__SecurityTokenReference (130)
#endif

/* struct ds__RetrievalMethodType * has binding name 'PointerTods__RetrievalMethodType' for type 'ds:RetrievalMethodType' */
#ifndef SOAP_TYPE_PointerTods__RetrievalMethodType
#define SOAP_TYPE_PointerTods__RetrievalMethodType (129)
#endif

/* struct ds__KeyValueType * has binding name 'PointerTods__KeyValueType' for type 'ds:KeyValueType' */
#ifndef SOAP_TYPE_PointerTods__KeyValueType
#define SOAP_TYPE_PointerTods__KeyValueType (127)
#endif

/* struct _c14n__InclusiveNamespaces * has binding name 'PointerTo_c14n__InclusiveNamespaces' for type '' */
#ifndef SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces
#define SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces (123)
#endif

/* struct ds__KeyInfoType * has binding name 'PointerTods__KeyInfoType' for type 'ds:KeyInfoType' */
#ifndef SOAP_TYPE_PointerTods__KeyInfoType
#define SOAP_TYPE_PointerTods__KeyInfoType (115)
#endif

/* struct ds__SignedInfoType * has binding name 'PointerTods__SignedInfoType' for type 'ds:SignedInfoType' */
#ifndef SOAP_TYPE_PointerTods__SignedInfoType
#define SOAP_TYPE_PointerTods__SignedInfoType (113)
#endif

/* struct ds__X509DataType * has binding name 'PointerTods__X509DataType' for type 'ds:X509DataType' */
#ifndef SOAP_TYPE_PointerTods__X509DataType
#define SOAP_TYPE_PointerTods__X509DataType (110)
#endif

/* struct _wsse__Embedded * has binding name 'PointerTo_wsse__Embedded' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__Embedded
#define SOAP_TYPE_PointerTo_wsse__Embedded (108)
#endif

/* struct _wsse__KeyIdentifier * has binding name 'PointerTo_wsse__KeyIdentifier' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__KeyIdentifier
#define SOAP_TYPE_PointerTo_wsse__KeyIdentifier (107)
#endif

/* struct _wsse__Reference * has binding name 'PointerTo_wsse__Reference' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__Reference
#define SOAP_TYPE_PointerTo_wsse__Reference (106)
#endif

/* struct _wsse__Password * has binding name 'PointerTo_wsse__Password' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsse__Password
#define SOAP_TYPE_PointerTo_wsse__Password (100)
#endif

/* _ns2__ValidateOtp * has binding name 'PointerTo_ns2__ValidateOtp' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__ValidateOtp
#define SOAP_TYPE_PointerTo_ns2__ValidateOtp (91)
#endif

/* _ns2__GetCertificate * has binding name 'PointerTo_ns2__GetCertificate' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__GetCertificate
#define SOAP_TYPE_PointerTo_ns2__GetCertificate (87)
#endif

/* _ns2__CCMovelValidateSignature * has binding name 'PointerTo_ns2__CCMovelValidateSignature' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__CCMovelValidateSignature
#define SOAP_TYPE_PointerTo_ns2__CCMovelValidateSignature (83)
#endif

/* _ns2__CCMovelSign * has binding name 'PointerTo_ns2__CCMovelSign' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns2__CCMovelSign
#define SOAP_TYPE_PointerTo_ns2__CCMovelSign (79)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (75)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (73)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (71)
#endif

/* struct wsa__EndpointReferenceType * has binding name 'PointerTo_wsa__FaultTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__FaultTo
#define SOAP_TYPE_PointerTo_wsa__FaultTo (69)
#endif

/* struct wsa__EndpointReferenceType * has binding name 'PointerTo_wsa__ReplyTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__ReplyTo
#define SOAP_TYPE_PointerTo_wsa__ReplyTo (68)
#endif

/* struct wsa__EndpointReferenceType * has binding name 'PointerTo_wsa__From' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__From
#define SOAP_TYPE_PointerTo_wsa__From (67)
#endif

/* struct wsa__Relationship * has binding name 'PointerTo_wsa__RelatesTo' for type '' */
#ifndef SOAP_TYPE_PointerTo_wsa__RelatesTo
#define SOAP_TYPE_PointerTo_wsa__RelatesTo (66)
#endif

/* _wsa__Action has binding name '_wsa__Action' for type '' */
#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (60)
#endif

/* _wsa__To has binding name '_wsa__To' for type '' */
#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (59)
#endif

/* _wsa__MessageID has binding name '_wsa__MessageID' for type '' */
#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (57)
#endif

/* char ** has binding name 'PointerTo_XML' for type '' */
#ifndef SOAP_TYPE_PointerTo_XML
#define SOAP_TYPE_PointerTo_XML (55)
#endif

/* struct wsa__ServiceNameType * has binding name 'PointerTowsa__ServiceNameType' for type 'wsa:ServiceNameType' */
#ifndef SOAP_TYPE_PointerTowsa__ServiceNameType
#define SOAP_TYPE_PointerTowsa__ServiceNameType (54)
#endif

/* char ** has binding name 'PointerTo_QName' for type '' */
#ifndef SOAP_TYPE_PointerTo_QName
#define SOAP_TYPE_PointerTo_QName (53)
#endif

/* struct wsa__ReferenceParametersType * has binding name 'PointerTowsa__ReferenceParametersType' for type 'wsa:ReferenceParametersType' */
#ifndef SOAP_TYPE_PointerTowsa__ReferenceParametersType
#define SOAP_TYPE_PointerTowsa__ReferenceParametersType (52)
#endif

/* struct wsa__ReferencePropertiesType * has binding name 'PointerTowsa__ReferencePropertiesType' for type 'wsa:ReferencePropertiesType' */
#ifndef SOAP_TYPE_PointerTowsa__ReferencePropertiesType
#define SOAP_TYPE_PointerTowsa__ReferencePropertiesType (51)
#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (38)
#endif

/* ns3__SignResponse * has binding name 'PointerTons3__SignResponse' for type 'ns3:SignResponse' */
#ifndef SOAP_TYPE_PointerTons3__SignResponse
#define SOAP_TYPE_PointerTons3__SignResponse (36)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (35)
#endif

/* xsd__base64Binary * has binding name 'PointerToxsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (33)
#endif

/* ns3__ValidationResponse * has binding name 'PointerTons3__ValidationResponse' for type 'ns3:ValidationResponse' */
#ifndef SOAP_TYPE_PointerTons3__ValidationResponse
#define SOAP_TYPE_PointerTons3__ValidationResponse (32)
#endif

/* ns3__ValidationRequest * has binding name 'PointerTons3__ValidationRequest' for type 'ns3:ValidationRequest' */
#ifndef SOAP_TYPE_PointerTons3__ValidationRequest
#define SOAP_TYPE_PointerTons3__ValidationRequest (31)
#endif

/* ns3__SignStatus * has binding name 'PointerTons3__SignStatus' for type 'ns3:SignStatus' */
#ifndef SOAP_TYPE_PointerTons3__SignStatus
#define SOAP_TYPE_PointerTons3__SignStatus (30)
#endif

/* ns3__SignRequest * has binding name 'PointerTons3__SignRequest' for type 'ns3:SignRequest' */
#ifndef SOAP_TYPE_PointerTons3__SignRequest
#define SOAP_TYPE_PointerTons3__SignRequest (29)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (14)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

#ifndef WIN32
#pragma GCC visibility pop
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
