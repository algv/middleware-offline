/* soapWSHttpBinding_USCORECCMovelSignatureProxy.cpp
   Generated by gSOAP 2.8.30 for CCMovelSignature.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapWSHttpBinding_USCORECCMovelSignatureProxy.h"

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCORECCMovelSignatureProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy(const WSHttpBinding_USCORECCMovelSignatureProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	WSHttpBinding_USCORECCMovelSignatureProxy_init(_soap->imode, _soap->omode);
}

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCORECCMovelSignatureProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCORECCMovelSignatureProxy_init(iomode, iomode);
}

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCORECCMovelSignatureProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCORECCMovelSignatureProxy_init(imode, omode);
}

WSHttpBinding_USCORECCMovelSignatureProxy::~WSHttpBinding_USCORECCMovelSignatureProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void WSHttpBinding_USCORECCMovelSignatureProxy::WSHttpBinding_USCORECCMovelSignatureProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns3", "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature", NULL, NULL},
        {"wsa", "http://www.w3.org/2005/08/addressing", NULL, NULL},
        {"tempuri", "http://tempuri.org/", NULL, NULL},
        {"ns2", "http://Ama.Authentication.Service/", NULL, NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
WSHttpBinding_USCORECCMovelSignatureProxy *WSHttpBinding_USCORECCMovelSignatureProxy::copy()
{	WSHttpBinding_USCORECCMovelSignatureProxy *dup = SOAP_NEW_COPY(WSHttpBinding_USCORECCMovelSignatureProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

WSHttpBinding_USCORECCMovelSignatureProxy& WSHttpBinding_USCORECCMovelSignatureProxy::operator=(const WSHttpBinding_USCORECCMovelSignatureProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void WSHttpBinding_USCORECCMovelSignatureProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void WSHttpBinding_USCORECCMovelSignatureProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	WSHttpBinding_USCORECCMovelSignatureProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void WSHttpBinding_USCORECCMovelSignatureProxy::soap_noheader()
{	this->soap->header = NULL;
}

void WSHttpBinding_USCORECCMovelSignatureProxy::soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsa__MessageID = wsa__MessageID;
	this->soap->header->wsa__RelatesTo = wsa__RelatesTo;
	this->soap->header->wsa__From = wsa__From;
	this->soap->header->wsa__ReplyTo = wsa__ReplyTo;
	this->soap->header->wsa__FaultTo = wsa__FaultTo;
	this->soap->header->wsa__To = wsa__To;
	this->soap->header->wsa__Action = wsa__Action;
	this->soap->header->wsse__Security = wsse__Security;
}

::SOAP_ENV__Header *WSHttpBinding_USCORECCMovelSignatureProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *WSHttpBinding_USCORECCMovelSignatureProxy::soap_fault()
{	return this->soap->fault;
}

const char *WSHttpBinding_USCORECCMovelSignatureProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *WSHttpBinding_USCORECCMovelSignatureProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int WSHttpBinding_USCORECCMovelSignatureProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int WSHttpBinding_USCORECCMovelSignatureProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void WSHttpBinding_USCORECCMovelSignatureProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WSHttpBinding_USCORECCMovelSignatureProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *WSHttpBinding_USCORECCMovelSignatureProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int WSHttpBinding_USCORECCMovelSignatureProxy::CCMovelSign(const char *endpoint, const char *soap_action, _ns2__CCMovelSign *ns2__CCMovelSign, _ns2__CCMovelSignResponse &ns2__CCMovelSignResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__CCMovelSign soap_tmp___tempuri__CCMovelSign;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://dev.cmd.autenticacao.gov.pt/Ama.Authentication.Service/CCMovelSignature.svc";
	if (soap_action == NULL)
		soap_action = "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign";
	soap_tmp___tempuri__CCMovelSign.ns2__CCMovelSign = ns2__CCMovelSign;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__CCMovelSign(soap, &soap_tmp___tempuri__CCMovelSign);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__CCMovelSign(soap, &soap_tmp___tempuri__CCMovelSign, "-tempuri:CCMovelSign", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__CCMovelSign(soap, &soap_tmp___tempuri__CCMovelSign, "-tempuri:CCMovelSign", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns2__CCMovelSignResponse)
		return soap_closesock(soap);
	ns2__CCMovelSignResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__CCMovelSignResponse.soap_get(soap, "ns2:CCMovelSignResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCORECCMovelSignatureProxy::CCMovelValidateSignature(const char *endpoint, const char *soap_action, _ns2__CCMovelValidateSignature *ns2__CCMovelValidateSignature, _ns2__CCMovelValidateSignatureResponse &ns2__CCMovelValidateSignatureResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__CCMovelValidateSignature soap_tmp___tempuri__CCMovelValidateSignature;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://dev.cmd.autenticacao.gov.pt/Ama.Authentication.Service/CCMovelSignature.svc";
	if (soap_action == NULL)
		soap_action = "http://Ama.Authentication.Service/CCMovelSignature/CCMovelValidateSignature";
	soap_tmp___tempuri__CCMovelValidateSignature.ns2__CCMovelValidateSignature = ns2__CCMovelValidateSignature;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__CCMovelValidateSignature(soap, &soap_tmp___tempuri__CCMovelValidateSignature);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__CCMovelValidateSignature(soap, &soap_tmp___tempuri__CCMovelValidateSignature, "-tempuri:CCMovelValidateSignature", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__CCMovelValidateSignature(soap, &soap_tmp___tempuri__CCMovelValidateSignature, "-tempuri:CCMovelValidateSignature", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns2__CCMovelValidateSignatureResponse)
		return soap_closesock(soap);
	ns2__CCMovelValidateSignatureResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__CCMovelValidateSignatureResponse.soap_get(soap, "ns2:CCMovelValidateSignatureResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCORECCMovelSignatureProxy::GetCertificate(const char *endpoint, const char *soap_action, _ns2__GetCertificate *ns2__GetCertificate, _ns2__GetCertificateResponse &ns2__GetCertificateResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__GetCertificate soap_tmp___tempuri__GetCertificate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://dev.cmd.autenticacao.gov.pt/Ama.Authentication.Service/CCMovelSignature.svc";
	if (soap_action == NULL)
		soap_action = "http://Ama.Authentication.Service/CCMovelSignature/GetCertificate";
	soap_tmp___tempuri__GetCertificate.ns2__GetCertificate = ns2__GetCertificate;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetCertificate(soap, &soap_tmp___tempuri__GetCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetCertificate(soap, &soap_tmp___tempuri__GetCertificate, "-tempuri:GetCertificate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetCertificate(soap, &soap_tmp___tempuri__GetCertificate, "-tempuri:GetCertificate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns2__GetCertificateResponse)
		return soap_closesock(soap);
	ns2__GetCertificateResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetCertificateResponse.soap_get(soap, "ns2:GetCertificateResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCORECCMovelSignatureProxy::ValidateOtp(const char *endpoint, const char *soap_action, _ns2__ValidateOtp *ns2__ValidateOtp, _ns2__ValidateOtpResponse &ns2__ValidateOtpResponse)
{	struct soap *soap = this->soap;
	struct __tempuri__ValidateOtp soap_tmp___tempuri__ValidateOtp;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://dev.cmd.autenticacao.gov.pt/Ama.Authentication.Service/CCMovelSignature.svc";
	if (soap_action == NULL)
		soap_action = "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp";
	soap_tmp___tempuri__ValidateOtp.ns2__ValidateOtp = ns2__ValidateOtp;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___tempuri__ValidateOtp(soap, &soap_tmp___tempuri__ValidateOtp);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__ValidateOtp(soap, &soap_tmp___tempuri__ValidateOtp, "-tempuri:ValidateOtp", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__ValidateOtp(soap, &soap_tmp___tempuri__ValidateOtp, "-tempuri:ValidateOtp", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ns2__ValidateOtpResponse)
		return soap_closesock(soap);
	ns2__ValidateOtpResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__ValidateOtpResponse.soap_get(soap, "ns2:ValidateOtpResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
